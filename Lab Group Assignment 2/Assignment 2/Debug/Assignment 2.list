
Assignment 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d8  080061d8  000200e4  2**0
                  CONTENTS
  4 .ARM          00000000  080061d8  080061d8  000200e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d8  080061d8  000200e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d8  080061d8  000161d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e4  20000000  080061e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  200000e8  080062c4  000200e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  080062c4  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011949  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6a  00000000  00000000  00031a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000348c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193a7  00000000  00000000  00036508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120bf  00000000  00000000  0004f8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009252d  00000000  00000000  0006196e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3e9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ec  00000000  00000000  000f3eec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006128 	.word	0x08006128

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	08006128 	.word	0x08006128

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000b68:	b5b0      	push	{r4, r5, r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000b76:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000b7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b82:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b86:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000b88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000b8a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f000 f80e 	bl	8000bbe <Lcd_init>

	return lcd;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	461d      	mov	r5, r3
 8000ba6:	f107 0410 	add.w	r4, r7, #16
 8000baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bb2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdb0      	pop	{r4, r5, r7, pc}

08000bbe <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7d9b      	ldrb	r3, [r3, #22]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10c      	bne.n	8000be8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000bce:	2133      	movs	r1, #51	; 0x33
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f000 f87b 	bl	8000ccc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000bd6:	2132      	movs	r1, #50	; 0x32
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f877 	bl	8000ccc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000bde:	2128      	movs	r1, #40	; 0x28
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f873 	bl	8000ccc <lcd_write_command>
 8000be6:	e003      	b.n	8000bf0 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000be8:	2138      	movs	r1, #56	; 0x38
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f86e 	bl	8000ccc <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f86a 	bl	8000ccc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000bf8:	210c      	movs	r1, #12
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f866 	bl	8000ccc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000c00:	2106      	movs	r1, #6
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f862 	bl	8000ccc <lcd_write_command>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	4906      	ldr	r1, [pc, #24]	; (8000c3c <Lcd_int+0x2c>)
 8000c22:	4618      	mov	r0, r3
 8000c24:	f004 fe24 	bl	8005870 <siprintf>

	Lcd_string(lcd, buffer);
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f806 	bl	8000c40 <Lcd_string>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	08006140 	.word	0x08006140

08000c40 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e00a      	b.n	8000c66 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000c50:	7bfb      	ldrb	r3, [r7, #15]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f864 	bl	8000d28 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	3301      	adds	r3, #1
 8000c64:	73fb      	strb	r3, [r7, #15]
 8000c66:	7bfc      	ldrb	r4, [r7, #15]
 8000c68:	6838      	ldr	r0, [r7, #0]
 8000c6a:	f7ff fab9 	bl	80001e0 <strlen>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	429c      	cmp	r4, r3
 8000c72:	d3ed      	bcc.n	8000c50 <Lcd_string+0x10>
	}
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd90      	pop	{r4, r7, pc}
	...

08000c80 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <Lcd_cursor+0x30>)
 8000c94:	5cd2      	ldrb	r2, [r2, r3]
 8000c96:	78bb      	ldrb	r3, [r7, #2]
 8000c98:	4413      	add	r3, r2
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	3b80      	subs	r3, #128	; 0x80
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 f812 	bl	8000ccc <lcd_write_command>
	#endif
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	08006198 	.word	0x08006198

08000cb4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f804 	bl	8000ccc <lcd_write_command>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6898      	ldr	r0, [r3, #8]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f001 fe46 	bl	8002974 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7d9b      	ldrb	r3, [r3, #22]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d111      	bne.n	8000d14 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000cf0:	78fb      	ldrb	r3, [r7, #3]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 f842 	bl	8000d84 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2204      	movs	r2, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f839 	bl	8000d84 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000d12:	e005      	b.n	8000d20 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2208      	movs	r2, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 f832 	bl	8000d84 <lcd_write>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6898      	ldr	r0, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	899b      	ldrh	r3, [r3, #12]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4619      	mov	r1, r3
 8000d40:	f001 fe18 	bl	8002974 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	7d9b      	ldrb	r3, [r3, #22]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d111      	bne.n	8000d70 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2204      	movs	r2, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f814 	bl	8000d84 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2204      	movs	r2, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f80b 	bl	8000d84 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000d6e:	e005      	b.n	8000d7c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000d70:	78fb      	ldrb	r3, [r7, #3]
 8000d72:	2208      	movs	r2, #8
 8000d74:	4619      	mov	r1, r3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f000 f804 	bl	8000d84 <lcd_write>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	70fb      	strb	r3, [r7, #3]
 8000d90:	4613      	mov	r3, r2
 8000d92:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e019      	b.n	8000dce <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	8819      	ldrh	r1, [r3, #0]
 8000db2:	78fa      	ldrb	r2, [r7, #3]
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	fa42 f303 	asr.w	r3, r2, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f001 fdd6 	bl	8002974 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	7bfa      	ldrb	r2, [r7, #15]
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d3e1      	bcc.n	8000d9a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6918      	ldr	r0, [r3, #16]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	8a9b      	ldrh	r3, [r3, #20]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4619      	mov	r1, r3
 8000de2:	f001 fdc7 	bl	8002974 <HAL_GPIO_WritePin>
	DELAY(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f001 fa26 	bl	8002238 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6918      	ldr	r0, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8a9b      	ldrh	r3, [r3, #20]
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	f001 fdbc 	bl	8002974 <HAL_GPIO_WritePin>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8000e12:	f000 fefb 	bl	8001c0c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	2120      	movs	r1, #32
 8000e20:	2032      	movs	r0, #50	; 0x32
 8000e22:	f000 ff4b 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	2123      	movs	r1, #35	; 0x23
 8000e30:	2032      	movs	r0, #50	; 0x32
 8000e32:	f000 ff43 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8000e56:	f000 fed9 	bl	8001c0c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	2032      	movs	r0, #50	; 0x32
 8000e5e:	f000 ff40 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000e76:	2124      	movs	r1, #36	; 0x24
 8000e78:	2032      	movs	r0, #50	; 0x32
 8000e7a:	f000 ff32 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e88:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	2124      	movs	r1, #36	; 0x24
 8000e90:	2032      	movs	r0, #50	; 0x32
 8000e92:	f000 ff13 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000ea8:	2121      	movs	r1, #33	; 0x21
 8000eaa:	2032      	movs	r0, #50	; 0x32
 8000eac:	f000 ff19 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8000ebc:	7bfa      	ldrb	r2, [r7, #15]
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	2121      	movs	r1, #33	; 0x21
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f000 fef6 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8000ee2:	2121      	movs	r1, #33	; 0x21
 8000ee4:	2032      	movs	r0, #50	; 0x32
 8000ee6:	f000 fefc 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000eea:	4603      	mov	r3, r0
 8000eec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	f023 0308 	bic.w	r3, r3, #8
 8000ef4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
 8000f00:	461a      	mov	r2, r3
 8000f02:	2121      	movs	r1, #33	; 0x21
 8000f04:	2032      	movs	r0, #50	; 0x32
 8000f06:	f000 fed9 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b088      	sub	sp, #32
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8000f22:	2301      	movs	r3, #1
 8000f24:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8000f26:	2123      	movs	r1, #35	; 0x23
 8000f28:	2032      	movs	r0, #50	; 0x32
 8000f2a:	f000 feda 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8000f32:	2124      	movs	r1, #36	; 0x24
 8000f34:	2032      	movs	r0, #50	; 0x32
 8000f36:	f000 fed4 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8000f3e:	2128      	movs	r1, #40	; 0x28
 8000f40:	2032      	movs	r0, #50	; 0x32
 8000f42:	f000 fece 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f46:	4603      	mov	r3, r0
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8000f4c:	2129      	movs	r1, #41	; 0x29
 8000f4e:	2032      	movs	r0, #50	; 0x32
 8000f50:	f000 fec7 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b25b      	sxtb	r3, r3
 8000f58:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8000f5a:	212a      	movs	r1, #42	; 0x2a
 8000f5c:	2032      	movs	r0, #50	; 0x32
 8000f5e:	f000 fec0 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8000f68:	212b      	movs	r1, #43	; 0x2b
 8000f6a:	2032      	movs	r0, #50	; 0x32
 8000f6c:	f000 feb9 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8000f76:	212c      	movs	r1, #44	; 0x2c
 8000f78:	2032      	movs	r0, #50	; 0x32
 8000f7a:	f000 feb2 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8000f84:	212d      	movs	r1, #45	; 0x2d
 8000f86:	2032      	movs	r0, #50	; 0x32
 8000f88:	f000 feab 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8000f92:	7d3b      	ldrb	r3, [r7, #20]
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d123      	bne.n	8000fe4 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	77fb      	strb	r3, [r7, #31]
 8000fa0:	e01c      	b.n	8000fdc <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	3320      	adds	r3, #32
 8000faa:	443b      	add	r3, r7
 8000fac:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	3320      	adds	r3, #32
 8000fbc:	443b      	add	r3, r7
 8000fbe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	b212      	sxth	r2, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	3320      	adds	r3, #32
 8000fd0:	443b      	add	r3, r7
 8000fd2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8000fd6:	7ffb      	ldrb	r3, [r7, #31]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	77fb      	strb	r3, [r7, #31]
 8000fdc:	7ffb      	ldrb	r3, [r7, #31]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d9df      	bls.n	8000fa2 <LSM303AGR_AccReadXYZ+0x90>
 8000fe2:	e022      	b.n	800102a <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	77fb      	strb	r3, [r7, #31]
 8000fe8:	e01c      	b.n	8001024 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	3320      	adds	r3, #32
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	3301      	adds	r3, #1
 8001002:	3320      	adds	r3, #32
 8001004:	443b      	add	r3, r7
 8001006:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800100a:	b29b      	uxth	r3, r3
 800100c:	4413      	add	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	7ffb      	ldrb	r3, [r7, #31]
 8001012:	b212      	sxth	r2, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	3320      	adds	r3, #32
 8001018:	443b      	add	r3, r7
 800101a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	3301      	adds	r3, #1
 8001022:	77fb      	strb	r3, [r7, #31]
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d9df      	bls.n	8000fea <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800102a:	7d3b      	ldrb	r3, [r7, #20]
 800102c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001030:	2b30      	cmp	r3, #48	; 0x30
 8001032:	d013      	beq.n	800105c <LSM303AGR_AccReadXYZ+0x14a>
 8001034:	2b30      	cmp	r3, #48	; 0x30
 8001036:	dc14      	bgt.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
 8001038:	2b20      	cmp	r3, #32
 800103a:	d00c      	beq.n	8001056 <LSM303AGR_AccReadXYZ+0x144>
 800103c:	2b20      	cmp	r3, #32
 800103e:	dc10      	bgt.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <LSM303AGR_AccReadXYZ+0x138>
 8001044:	2b10      	cmp	r3, #16
 8001046:	d003      	beq.n	8001050 <LSM303AGR_AccReadXYZ+0x13e>
 8001048:	e00b      	b.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 800104a:	2301      	movs	r3, #1
 800104c:	77bb      	strb	r3, [r7, #30]
    break;
 800104e:	e008      	b.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8001050:	2302      	movs	r3, #2
 8001052:	77bb      	strb	r3, [r7, #30]
    break;
 8001054:	e005      	b.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8001056:	2304      	movs	r3, #4
 8001058:	77bb      	strb	r3, [r7, #30]
    break;
 800105a:	e002      	b.n	8001062 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800105c:	230c      	movs	r3, #12
 800105e:	77bb      	strb	r3, [r7, #30]
    break;
 8001060:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001062:	2300      	movs	r3, #0
 8001064:	77fb      	strb	r3, [r7, #31]
 8001066:	e014      	b.n	8001092 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	3320      	adds	r3, #32
 800106e:	443b      	add	r3, r7
 8001070:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001074:	b29a      	uxth	r2, r3
 8001076:	7fbb      	ldrb	r3, [r7, #30]
 8001078:	b29b      	uxth	r3, r3
 800107a:	fb12 f303 	smulbb	r3, r2, r3
 800107e:	b299      	uxth	r1, r3
 8001080:	7ffb      	ldrb	r3, [r7, #31]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	b20a      	sxth	r2, r1
 800108a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3301      	adds	r3, #1
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d9e7      	bls.n	8001068 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8001098:	bf00      	nop
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 80010b0:	2121      	movs	r1, #33	; 0x21
 80010b2:	2032      	movs	r0, #50	; 0x32
 80010b4:	f000 fe15 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f023 0304 	bic.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	461a      	mov	r2, r3
 80010d0:	2121      	movs	r1, #33	; 0x21
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f000 fdf2 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 80010ee:	2122      	movs	r1, #34	; 0x22
 80010f0:	2032      	movs	r0, #50	; 0x32
 80010f2:	f000 fdf6 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	4313      	orrs	r3, r2
 8001100:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	461a      	mov	r2, r3
 8001106:	2122      	movs	r1, #34	; 0x22
 8001108:	2032      	movs	r0, #50	; 0x32
 800110a:	f000 fdd7 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8001124:	2138      	movs	r1, #56	; 0x38
 8001126:	2032      	movs	r0, #50	; 0x32
 8001128:	f000 fddb 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4313      	orrs	r3, r2
 8001136:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	2138      	movs	r1, #56	; 0x38
 800113e:	2032      	movs	r0, #50	; 0x32
 8001140:	f000 fdbc 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001144:	230a      	movs	r3, #10
 8001146:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	461a      	mov	r2, r3
 800114c:	213a      	movs	r1, #58	; 0x3a
 800114e:	2032      	movs	r0, #50	; 0x32
 8001150:	f000 fdb4 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001154:	2305      	movs	r3, #5
 8001156:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	461a      	mov	r2, r3
 800115c:	213b      	movs	r1, #59	; 0x3b
 800115e:	2032      	movs	r0, #50	; 0x32
 8001160:	f000 fdac 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	461a      	mov	r2, r3
 8001168:	213c      	movs	r1, #60	; 0x3c
 800116a:	2032      	movs	r0, #50	; 0x32
 800116c:	f000 fda6 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001170:	2332      	movs	r3, #50	; 0x32
 8001172:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	461a      	mov	r2, r3
 8001178:	213d      	movs	r1, #61	; 0x3d
 800117a:	2032      	movs	r0, #50	; 0x32
 800117c:	f000 fd9e 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800118c:	f000 fd66 	bl	8001c5c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8001190:	2080      	movs	r0, #128	; 0x80
 8001192:	f7ff ffa5 	bl	80010e0 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff ff83 	bl	80010a2 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800119c:	2010      	movs	r0, #16
 800119e:	f7ff ffba 	bl	8001116 <LSM303AGR_AccClickITEnable>
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80011b4:	f000 fd2a 	bl	8001c0c <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	461a      	mov	r2, r3
 80011c0:	2120      	movs	r1, #32
 80011c2:	2032      	movs	r0, #50	; 0x32
 80011c4:	f000 fd7a 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	461a      	mov	r2, r3
 80011d0:	2123      	movs	r1, #35	; 0x23
 80011d2:	2032      	movs	r0, #50	; 0x32
 80011d4:	f000 fd72 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80011f8:	f000 fd08 	bl	8001c0c <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80011fc:	210f      	movs	r1, #15
 80011fe:	2032      	movs	r0, #50	; 0x32
 8001200:	f000 fd6f 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001208:	79fb      	ldrb	r3, [r7, #7]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001218:	2124      	movs	r1, #36	; 0x24
 800121a:	2032      	movs	r0, #50	; 0x32
 800121c:	f000 fd61 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800122a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	461a      	mov	r2, r3
 8001230:	2124      	movs	r1, #36	; 0x24
 8001232:	2032      	movs	r0, #50	; 0x32
 8001234:	f000 fd42 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800124a:	2121      	movs	r1, #33	; 0x21
 800124c:	2032      	movs	r0, #50	; 0x32
 800124e:	f000 fd48 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	4313      	orrs	r3, r2
 8001264:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	461a      	mov	r2, r3
 800126a:	2121      	movs	r1, #33	; 0x21
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fd25 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b084      	sub	sp, #16
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001284:	2121      	movs	r1, #33	; 0x21
 8001286:	2032      	movs	r0, #50	; 0x32
 8001288:	f000 fd2b 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f023 0308 	bic.w	r3, r3, #8
 8001296:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001298:	7bfa      	ldrb	r2, [r7, #15]
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4313      	orrs	r3, r2
 800129e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80012a0:	7bfb      	ldrb	r3, [r7, #15]
 80012a2:	461a      	mov	r2, r3
 80012a4:	2121      	movs	r1, #33	; 0x21
 80012a6:	2032      	movs	r0, #50	; 0x32
 80012a8:	f000 fd08 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80012bc:	2300      	movs	r3, #0
 80012be:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80012c4:	2301      	movs	r3, #1
 80012c6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80012c8:	2123      	movs	r1, #35	; 0x23
 80012ca:	2032      	movs	r0, #50	; 0x32
 80012cc:	f000 fd09 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80012d0:	4603      	mov	r3, r0
 80012d2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80012d4:	2124      	movs	r1, #36	; 0x24
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f000 fd03 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80012e0:	2128      	movs	r1, #40	; 0x28
 80012e2:	2032      	movs	r0, #50	; 0x32
 80012e4:	f000 fcfd 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80012e8:	4603      	mov	r3, r0
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80012ee:	2129      	movs	r1, #41	; 0x29
 80012f0:	2032      	movs	r0, #50	; 0x32
 80012f2:	f000 fcf6 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80012fc:	212a      	movs	r1, #42	; 0x2a
 80012fe:	2032      	movs	r0, #50	; 0x32
 8001300:	f000 fcef 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001304:	4603      	mov	r3, r0
 8001306:	b25b      	sxtb	r3, r3
 8001308:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800130a:	212b      	movs	r1, #43	; 0x2b
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f000 fce8 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001312:	4603      	mov	r3, r0
 8001314:	b25b      	sxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	2032      	movs	r0, #50	; 0x32
 800131c:	f000 fce1 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001320:	4603      	mov	r3, r0
 8001322:	b25b      	sxtb	r3, r3
 8001324:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001326:	212d      	movs	r1, #45	; 0x2d
 8001328:	2032      	movs	r0, #50	; 0x32
 800132a:	f000 fcda 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 800132e:	4603      	mov	r3, r0
 8001330:	b25b      	sxtb	r3, r3
 8001332:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001334:	7d3b      	ldrb	r3, [r7, #20]
 8001336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d123      	bne.n	8001386 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	77fb      	strb	r3, [r7, #31]
 8001342:	e01c      	b.n	800137e <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001344:	7ffb      	ldrb	r3, [r7, #31]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	3301      	adds	r3, #1
 800134a:	3320      	adds	r3, #32
 800134c:	443b      	add	r3, r7
 800134e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001352:	b29b      	uxth	r3, r3
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b29a      	uxth	r2, r3
 8001358:	7ffb      	ldrb	r3, [r7, #31]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	3320      	adds	r3, #32
 800135e:	443b      	add	r3, r7
 8001360:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b29a      	uxth	r2, r3
 800136a:	7ffb      	ldrb	r3, [r7, #31]
 800136c:	b212      	sxth	r2, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	3320      	adds	r3, #32
 8001372:	443b      	add	r3, r7
 8001374:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001378:	7ffb      	ldrb	r3, [r7, #31]
 800137a:	3301      	adds	r3, #1
 800137c:	77fb      	strb	r3, [r7, #31]
 800137e:	7ffb      	ldrb	r3, [r7, #31]
 8001380:	2b02      	cmp	r3, #2
 8001382:	d9df      	bls.n	8001344 <LSM303DLHC_AccReadXYZ+0x90>
 8001384:	e022      	b.n	80013cc <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	77fb      	strb	r3, [r7, #31]
 800138a:	e01c      	b.n	80013c6 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800138c:	7ffb      	ldrb	r3, [r7, #31]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	3320      	adds	r3, #32
 8001392:	443b      	add	r3, r7
 8001394:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001398:	b29b      	uxth	r3, r3
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b29a      	uxth	r2, r3
 800139e:	7ffb      	ldrb	r3, [r7, #31]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	3301      	adds	r3, #1
 80013a4:	3320      	adds	r3, #32
 80013a6:	443b      	add	r3, r7
 80013a8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	b212      	sxth	r2, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	3320      	adds	r3, #32
 80013ba:	443b      	add	r3, r7
 80013bc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	3301      	adds	r3, #1
 80013c4:	77fb      	strb	r3, [r7, #31]
 80013c6:	7ffb      	ldrb	r3, [r7, #31]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d9df      	bls.n	800138c <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80013cc:	7d3b      	ldrb	r3, [r7, #20]
 80013ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013d2:	2b30      	cmp	r3, #48	; 0x30
 80013d4:	d013      	beq.n	80013fe <LSM303DLHC_AccReadXYZ+0x14a>
 80013d6:	2b30      	cmp	r3, #48	; 0x30
 80013d8:	dc14      	bgt.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
 80013da:	2b20      	cmp	r3, #32
 80013dc:	d00c      	beq.n	80013f8 <LSM303DLHC_AccReadXYZ+0x144>
 80013de:	2b20      	cmp	r3, #32
 80013e0:	dc10      	bgt.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <LSM303DLHC_AccReadXYZ+0x138>
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d003      	beq.n	80013f2 <LSM303DLHC_AccReadXYZ+0x13e>
 80013ea:	e00b      	b.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80013ec:	2301      	movs	r3, #1
 80013ee:	77bb      	strb	r3, [r7, #30]
    break;
 80013f0:	e008      	b.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80013f2:	2302      	movs	r3, #2
 80013f4:	77bb      	strb	r3, [r7, #30]
    break;
 80013f6:	e005      	b.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80013f8:	2304      	movs	r3, #4
 80013fa:	77bb      	strb	r3, [r7, #30]
    break;
 80013fc:	e002      	b.n	8001404 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80013fe:	230c      	movs	r3, #12
 8001400:	77bb      	strb	r3, [r7, #30]
    break;
 8001402:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001404:	2300      	movs	r3, #0
 8001406:	77fb      	strb	r3, [r7, #31]
 8001408:	e014      	b.n	8001434 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3320      	adds	r3, #32
 8001410:	443b      	add	r3, r7
 8001412:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001416:	b29a      	uxth	r2, r3
 8001418:	7fbb      	ldrb	r3, [r7, #30]
 800141a:	b29b      	uxth	r3, r3
 800141c:	fb12 f303 	smulbb	r3, r2, r3
 8001420:	b299      	uxth	r1, r3
 8001422:	7ffb      	ldrb	r3, [r7, #31]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	b20a      	sxth	r2, r1
 800142c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	3301      	adds	r3, #1
 8001432:	77fb      	strb	r3, [r7, #31]
 8001434:	7ffb      	ldrb	r3, [r7, #31]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d9e7      	bls.n	800140a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001452:	2121      	movs	r1, #33	; 0x21
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f000 fc44 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 800145a:	4603      	mov	r3, r0
 800145c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f023 0304 	bic.w	r3, r3, #4
 8001464:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001466:	7bfa      	ldrb	r2, [r7, #15]
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4313      	orrs	r3, r2
 800146c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	461a      	mov	r2, r3
 8001472:	2121      	movs	r1, #33	; 0x21
 8001474:	2032      	movs	r0, #50	; 0x32
 8001476:	f000 fc21 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b084      	sub	sp, #16
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001490:	2122      	movs	r1, #34	; 0x22
 8001492:	2032      	movs	r0, #50	; 0x32
 8001494:	f000 fc25 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2122      	movs	r1, #34	; 0x22
 80014aa:	2032      	movs	r0, #50	; 0x32
 80014ac:	f000 fc06 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80014c6:	2138      	movs	r1, #56	; 0x38
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f000 fc0a 	bl	8001ce2 <COMPASSACCELERO_IO_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	461a      	mov	r2, r3
 80014de:	2138      	movs	r1, #56	; 0x38
 80014e0:	2032      	movs	r0, #50	; 0x32
 80014e2:	f000 fbeb 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80014e6:	230a      	movs	r3, #10
 80014e8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	461a      	mov	r2, r3
 80014ee:	213a      	movs	r1, #58	; 0x3a
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 fbe3 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80014f6:	2305      	movs	r3, #5
 80014f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	461a      	mov	r2, r3
 80014fe:	213b      	movs	r1, #59	; 0x3b
 8001500:	2032      	movs	r0, #50	; 0x32
 8001502:	f000 fbdb 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	461a      	mov	r2, r3
 800150a:	213c      	movs	r1, #60	; 0x3c
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f000 fbd5 	bl	8001cbc <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001512:	2332      	movs	r3, #50	; 0x32
 8001514:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	461a      	mov	r2, r3
 800151a:	213d      	movs	r1, #61	; 0x3d
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f000 fbcd 	bl	8001cbc <COMPASSACCELERO_IO_Write>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800152e:	f000 fb95 	bl	8001c5c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001532:	2080      	movs	r0, #128	; 0x80
 8001534:	f7ff ffa5 	bl	8001482 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001538:	2004      	movs	r0, #4
 800153a:	f7ff ff83 	bl	8001444 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800153e:	2010      	movs	r0, #16
 8001540:	f7ff ffba 	bl	80014b8 <LSM303DLHC_AccClickITEnable>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b096      	sub	sp, #88	; 0x58
 800154c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 fe01 	bl	8002154 <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001552:	f000 f95b 	bl	800180c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001556:	f000 f979 	bl	800184c <MX_GPIO_Init>

  BSP_ACCELERO_Init();
 800155a:	f000 fbd5 	bl	8001d08 <BSP_ACCELERO_Init>
  /* USER CODE BEGIN 2 */

  Lcd_PortType ports[] = { GPIOD, GPIOD, GPIOD, GPIOD };
 800155e:	4b99      	ldr	r3, [pc, #612]	; (80017c4 <main+0x27c>)
 8001560:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
 800156a:	4a97      	ldr	r2, [pc, #604]	; (80017c8 <main+0x280>)
 800156c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001570:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001574:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
  // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, RS_Pin, GPIOB, EN_Pin, LCD_4_BIT_MODE);
 8001578:	4638      	mov	r0, r7
 800157a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800157e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001582:	2300      	movs	r3, #0
 8001584:	9303      	str	r3, [sp, #12]
 8001586:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <main+0x284>)
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <main+0x284>)
 8001598:	f7ff fae6 	bl	8000b68 <Lcd_create>
 800159c:	f107 0418 	add.w	r4, r7, #24
 80015a0:	463d      	mov	r5, r7
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015aa:	e884 0003 	stmia.w	r4, {r0, r1}

    Lcd_cursor(&lcd, 0,0);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb62 	bl	8000c80 <Lcd_cursor>
      Lcd_string(&lcd, "Welcome ");
 80015bc:	f107 0318 	add.w	r3, r7, #24
 80015c0:	4983      	ldr	r1, [pc, #524]	; (80017d0 <main+0x288>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fb3c 	bl	8000c40 <Lcd_string>
      Lcd_cursor(&lcd, 1,0);
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb55 	bl	8000c80 <Lcd_cursor>
      Lcd_string(&lcd, "User ");
 80015d6:	f107 0318 	add.w	r3, r7, #24
 80015da:	497e      	ldr	r1, [pc, #504]	; (80017d4 <main+0x28c>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fb2f 	bl	8000c40 <Lcd_string>

      HAL_Delay(2000);
 80015e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015e6:	f000 fe27 	bl	8002238 <HAL_Delay>
      Lcd_clear(&lcd);
 80015ea:	f107 0318 	add.w	r3, r7, #24
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb60 	bl	8000cb4 <Lcd_clear>
      Lcd_cursor(&lcd, 0,0);
 80015f4:	f107 0318 	add.w	r3, r7, #24
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fb3f 	bl	8000c80 <Lcd_cursor>
		Lcd_string(&lcd, "Ready ");
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4974      	ldr	r1, [pc, #464]	; (80017d8 <main+0x290>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fb19 	bl	8000c40 <Lcd_string>
		Lcd_cursor(&lcd, 1,0);
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	2200      	movs	r2, #0
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb32 	bl	8000c80 <Lcd_cursor>
		Lcd_string(&lcd, "Steps: ");
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	496e      	ldr	r1, [pc, #440]	; (80017dc <main+0x294>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb0c 	bl	8000c40 <Lcd_string>
		Lcd_cursor(&lcd, 1, 8);
 8001628:	f107 0318 	add.w	r3, r7, #24
 800162c:	2208      	movs	r2, #8
 800162e:	2101      	movs	r1, #1
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fb25 	bl	8000c80 <Lcd_cursor>
		Lcd_int(&lcd, 0);
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fae7 	bl	8000c10 <Lcd_int>
  while (1)
  {
    /* USER CODE END WHILE */
	  //MX_USB_HOST_Process();

	  HAL_Delay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001646:	f000 fdf7 	bl	8002238 <HAL_Delay>
	  Lcd_cursor(&lcd, 0,0);
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fb14 	bl	8000c80 <Lcd_cursor>
	  Lcd_string(&lcd, "Stopped ");
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	4960      	ldr	r1, [pc, #384]	; (80017e0 <main+0x298>)
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff faee 	bl	8000c40 <Lcd_string>
	        BSP_ACCELERO_GetXYZ(accelVals);
 8001664:	485f      	ldr	r0, [pc, #380]	; (80017e4 <main+0x29c>)
 8001666:	f000 fc11 	bl	8001e8c <BSP_ACCELERO_GetXYZ>
	        x_position = accelVals[0];
 800166a:	4b5e      	ldr	r3, [pc, #376]	; (80017e4 <main+0x29c>)
 800166c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff5f 	bl	8000534 <__aeabi_i2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	495b      	ldr	r1, [pc, #364]	; (80017e8 <main+0x2a0>)
 800167c:	e9c1 2300 	strd	r2, r3, [r1]
	        HAL_Delay(1);
 8001680:	2001      	movs	r0, #1
 8001682:	f000 fdd9 	bl	8002238 <HAL_Delay>
	        y_position = accelVals[1];
 8001686:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <main+0x29c>)
 8001688:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff51 	bl	8000534 <__aeabi_i2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4955      	ldr	r1, [pc, #340]	; (80017ec <main+0x2a4>)
 8001698:	e9c1 2300 	strd	r2, r3, [r1]
	        HAL_Delay(1);
 800169c:	2001      	movs	r0, #1
 800169e:	f000 fdcb 	bl	8002238 <HAL_Delay>
	        z_position = accelVals[2];
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <main+0x29c>)
 80016a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff43 	bl	8000534 <__aeabi_i2d>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	494f      	ldr	r1, [pc, #316]	; (80017f0 <main+0x2a8>)
 80016b4:	e9c1 2300 	strd	r2, r3, [r1]
	        HAL_Delay(1);
 80016b8:	2001      	movs	r0, #1
 80016ba:	f000 fdbd 	bl	8002238 <HAL_Delay>
	        magnitude = sqrt( ((x_position)*(x_position)) + ((y_position)*(y_position)) + ((z_position)*(z_position)));
 80016be:	4b4a      	ldr	r3, [pc, #296]	; (80017e8 <main+0x2a0>)
 80016c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c4:	4b48      	ldr	r3, [pc, #288]	; (80017e8 <main+0x2a0>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ff9d 	bl	8000608 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4614      	mov	r4, r2
 80016d4:	461d      	mov	r5, r3
 80016d6:	4b45      	ldr	r3, [pc, #276]	; (80017ec <main+0x2a4>)
 80016d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <main+0x2a4>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff91 	bl	8000608 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdd5 	bl	800029c <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <main+0x2a8>)
 80016fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001700:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <main+0x2a8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff7f 	bl	8000608 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe fdc3 	bl	800029c <__adddf3>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	ec43 2b17 	vmov	d7, r2, r3
 800171e:	eeb0 0a47 	vmov.f32	s0, s14
 8001722:	eef0 0a67 	vmov.f32	s1, s15
 8001726:	f004 fc20 	bl	8005f6a <sqrt>
 800172a:	eeb0 7a40 	vmov.f32	s14, s0
 800172e:	eef0 7a60 	vmov.f32	s15, s1
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <main+0x2ac>)
 8001734:	ed83 7b00 	vstr	d7, [r3]
			  HAL_Delay(100);
 8001738:	2064      	movs	r0, #100	; 0x64
 800173a:	f000 fd7d 	bl	8002238 <HAL_Delay>
			  change_in_magnitude = magnitude - last_magnitude;
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <main+0x2ac>)
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <main+0x2b0>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe fda5 	bl	8000298 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	492a      	ldr	r1, [pc, #168]	; (80017fc <main+0x2b4>)
 8001754:	e9c1 2300 	strd	r2, r3, [r1]
			  last_magnitude = magnitude;
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <main+0x2ac>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	4926      	ldr	r1, [pc, #152]	; (80017f8 <main+0x2b0>)
 8001760:	e9c1 2300 	strd	r2, r3, [r1]

			  if(change_in_magnitude > pedometer_threshold)
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <main+0x2b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fee3 	bl	8000534 <__aeabi_i2d>
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <main+0x2b4>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7ff f9ba 	bl	8000aec <__aeabi_dcmplt>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d020      	beq.n	80017c0 <main+0x278>
			  {
				  steps_counter++;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <main+0x2bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <main+0x2bc>)
 8001786:	6013      	str	r3, [r2, #0]
				  Lcd_cursor(&lcd,1, 8);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	2208      	movs	r2, #8
 800178e:	2101      	movs	r1, #1
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fa75 	bl	8000c80 <Lcd_cursor>
				  Lcd_int(&lcd,steps_counter);
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <main+0x2bc>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	f107 0318 	add.w	r3, r7, #24
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa35 	bl	8000c10 <Lcd_int>
				  Lcd_cursor(&lcd, 0,0);
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fa66 	bl	8000c80 <Lcd_cursor>
				  Lcd_string(&lcd, "Walking ");
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <main+0x2c0>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fa40 	bl	8000c40 <Lcd_string>
  {
 80017c0:	e73f      	b.n	8001642 <main+0xfa>
 80017c2:	bf00      	nop
 80017c4:	08006180 	.word	0x08006180
 80017c8:	08006190 	.word	0x08006190
 80017cc:	40020400 	.word	0x40020400
 80017d0:	08006144 	.word	0x08006144
 80017d4:	08006150 	.word	0x08006150
 80017d8:	08006158 	.word	0x08006158
 80017dc:	08006160 	.word	0x08006160
 80017e0:	08006168 	.word	0x08006168
 80017e4:	20000138 	.word	0x20000138
 80017e8:	20000108 	.word	0x20000108
 80017ec:	20000110 	.word	0x20000110
 80017f0:	20000118 	.word	0x20000118
 80017f4:	20000120 	.word	0x20000120
 80017f8:	20000130 	.word	0x20000130
 80017fc:	20000128 	.word	0x20000128
 8001800:	2000006c 	.word	0x2000006c
 8001804:	20000068 	.word	0x20000068
 8001808:	08006174 	.word	0x08006174

0800180c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001822:	2301      	movs	r3, #1
 8001824:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001826:	23c8      	movs	r3, #200	; 0xc8
 8001828:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800182a:	2305      	movs	r3, #5
 800182c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800182e:	2302      	movs	r3, #2
 8001830:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f9ff 	bl	8004c38 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001840:	f000 f8f6 	bl	8001a30 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	4a6b      	ldr	r2, [pc, #428]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	6313      	str	r3, [r2, #48]	; 0x30
 8001872:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	f003 0310 	and.w	r3, r3, #16
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a64      	ldr	r2, [pc, #400]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	617b      	str	r3, [r7, #20]
 8001898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a5d      	ldr	r2, [pc, #372]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b5b      	ldr	r3, [pc, #364]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a56      	ldr	r2, [pc, #344]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b54      	ldr	r3, [pc, #336]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a4f      	ldr	r2, [pc, #316]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 80018f8:	f043 0308 	orr.w	r3, r3, #8
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <MX_GPIO_Init+0x1cc>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2108      	movs	r1, #8
 800190e:	4843      	ldr	r0, [pc, #268]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001910:	f001 f830 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2101      	movs	r1, #1
 8001918:	4841      	ldr	r0, [pc, #260]	; (8001a20 <MX_GPIO_Init+0x1d4>)
 800191a:	f001 f82b 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|RS_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001924:	483f      	ldr	r0, [pc, #252]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 8001926:	f001 f825 	bl	8002974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800192a:	2200      	movs	r2, #0
 800192c:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001930:	483d      	ldr	r0, [pc, #244]	; (8001a28 <MX_GPIO_Init+0x1dc>)
 8001932:	f001 f81f 	bl	8002974 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8001936:	2304      	movs	r3, #4
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4834      	ldr	r0, [pc, #208]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 800194a:	f000 fdab 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800194e:	2308      	movs	r3, #8
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	2301      	movs	r3, #1
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	482d      	ldr	r0, [pc, #180]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001966:	f000 fd9d 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800196a:	2332      	movs	r3, #50	; 0x32
 800196c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800196e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001978:	f107 031c 	add.w	r3, r7, #28
 800197c:	4619      	mov	r1, r3
 800197e:	4827      	ldr	r0, [pc, #156]	; (8001a1c <MX_GPIO_Init+0x1d0>)
 8001980:	f000 fd90 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001984:	2301      	movs	r3, #1
 8001986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	4821      	ldr	r0, [pc, #132]	; (8001a20 <MX_GPIO_Init+0x1d4>)
 800199c:	f000 fd82 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019a0:	2301      	movs	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019a4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	481d      	ldr	r0, [pc, #116]	; (8001a2c <MX_GPIO_Init+0x1e0>)
 80019b6:	f000 fd75 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin;
 80019ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4814      	ldr	r0, [pc, #80]	; (8001a24 <MX_GPIO_Init+0x1d8>)
 80019d4:	f000 fd66 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80019d8:	f64f 7310 	movw	r3, #65296	; 0xff10
 80019dc:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_GPIO_Init+0x1dc>)
 80019f2:	f000 fd57 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019f6:	2320      	movs	r3, #32
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_GPIO_Init+0x1dc>)
 8001a0a:	f000 fd4b 	bl	80024a4 <HAL_GPIO_Init>

}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	; 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40020000 	.word	0x40020000

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <Error_Handler+0x8>
	...

08001a3c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001a40:	4814      	ldr	r0, [pc, #80]	; (8001a94 <I2Cx_Init+0x58>)
 8001a42:	f002 fd6f 	bl	8004524 <HAL_I2C_GetState>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d121      	bne.n	8001a90 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <I2Cx_Init+0x58>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <I2Cx_Init+0x5c>)
 8001a50:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <I2Cx_Init+0x58>)
 8001a54:	2243      	movs	r2, #67	; 0x43
 8001a56:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <I2Cx_Init+0x58>)
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <I2Cx_Init+0x60>)
 8001a5c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <I2Cx_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <I2Cx_Init+0x58>)
 8001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <I2Cx_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <I2Cx_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <I2Cx_Init+0x58>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <I2Cx_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <I2Cx_Init+0x58>)
 8001a86:	f000 f86b 	bl	8001b60 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001a8a:	4802      	ldr	r0, [pc, #8]	; (8001a94 <I2Cx_Init+0x58>)
 8001a8c:	f002 f8b6 	bl	8003bfc <HAL_I2C_Init>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000140 	.word	0x20000140
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	000186a0 	.word	0x000186a0

08001aa0 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	717b      	strb	r3, [r7, #5]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001ab6:	797b      	ldrb	r3, [r7, #5]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <I2Cx_WriteData+0x48>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	88f9      	ldrh	r1, [r7, #6]
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	4807      	ldr	r0, [pc, #28]	; (8001aec <I2Cx_WriteData+0x4c>)
 8001ace:	f002 fa09 	bl	8003ee4 <HAL_I2C_Mem_Write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001adc:	f000 f834 	bl	8001b48 <I2Cx_Error>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000070 	.word	0x20000070
 8001aec:	20000140 	.word	0x20000140

08001af0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af04      	add	r7, sp, #16
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	80fb      	strh	r3, [r7, #6]
 8001afc:	4613      	mov	r3, r2
 8001afe:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001b08:	797b      	ldrb	r3, [r7, #5]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <I2Cx_ReadData+0x50>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	88f9      	ldrh	r1, [r7, #6]
 8001b12:	9302      	str	r3, [sp, #8]
 8001b14:	2301      	movs	r3, #1
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	f107 030e 	add.w	r3, r7, #14
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4808      	ldr	r0, [pc, #32]	; (8001b44 <I2Cx_ReadData+0x54>)
 8001b22:	f002 fad9 	bl	80040d8 <HAL_I2C_Mem_Read>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001b30:	f000 f80a 	bl	8001b48 <I2Cx_Error>
  }
  return value;
 8001b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000070 	.word	0x20000070
 8001b44:	20000140 	.word	0x20000140

08001b48 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001b4c:	4803      	ldr	r0, [pc, #12]	; (8001b5c <I2Cx_Error+0x14>)
 8001b4e:	f002 f999 	bl	8003e84 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001b52:	f7ff ff73 	bl	8001a3c <I2Cx_Init>
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000140 	.word	0x20000140

08001b60 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b76:	6413      	str	r3, [r2, #64]	; 0x40
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001ba0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001ba6:	2312      	movs	r3, #18
 8001ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4812      	ldr	r0, [pc, #72]	; (8001c08 <I2Cx_MspInit+0xa8>)
 8001bbe:	f000 fc71 	bl	80024a4 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bcc:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <I2Cx_MspInit+0xa4>)
 8001bd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bd8:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	210f      	movs	r1, #15
 8001bde:	201f      	movs	r0, #31
 8001be0:	f000 fc29 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001be4:	201f      	movs	r0, #31
 8001be6:	f000 fc42 	bl	800246e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001bea:	2200      	movs	r2, #0
 8001bec:	210f      	movs	r1, #15
 8001bee:	2020      	movs	r0, #32
 8001bf0:	f000 fc21 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001bf4:	2020      	movs	r0, #32
 8001bf6:	f000 fc3a 	bl	800246e <HAL_NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400

08001c0c <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <COMPASSACCELERO_IO_Init+0x48>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <COMPASSACCELERO_IO_Init+0x48>)
 8001c1c:	f043 0310 	orr.w	r3, r3, #16
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <COMPASSACCELERO_IO_Init+0x48>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001c2e:	2304      	movs	r3, #4
 8001c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4805      	ldr	r0, [pc, #20]	; (8001c58 <COMPASSACCELERO_IO_Init+0x4c>)
 8001c44:	f000 fc2e 	bl	80024a4 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001c48:	f7ff fef8 	bl	8001a3c <I2Cx_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40021000 	.word	0x40021000

08001c5c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001c7e:	2330      	movs	r3, #48	; 0x30
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001c82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8001c96:	f000 fc05 	bl	80024a4 <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	210f      	movs	r1, #15
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f000 fbc9 	bl	8002436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 fbe2 	bl	800246e <HAL_NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021000 	.word	0x40021000

08001cbc <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	717b      	strb	r3, [r7, #5]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8001cce:	793a      	ldrb	r2, [r7, #4]
 8001cd0:	7979      	ldrb	r1, [r7, #5]
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fee3 	bl	8001aa0 <I2Cx_WriteData>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	460a      	mov	r2, r1
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001cf2:	797a      	ldrb	r2, [r7, #5]
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fef9 	bl	8001af0 <I2Cx_ReadData>
 8001cfe:	4603      	mov	r3, r0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001d12:	2300      	movs	r3, #0
 8001d14:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8001d16:	1d3b      	adds	r3, r7, #4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <BSP_ACCELERO_Init+0x178>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4798      	blx	r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b33      	cmp	r3, #51	; 0x33
 8001d28:	d14f      	bne.n	8001dca <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001d2a:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001d2c:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <BSP_ACCELERO_Init+0x178>)
 8001d2e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8001d38:	2307      	movs	r3, #7
 8001d3a:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8001d40:	2300      	movs	r3, #0
 8001d42:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8001d44:	2300      	movs	r3, #0
 8001d46:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001d4c:	7b3a      	ldrb	r2, [r7, #12]
 8001d4e:	7b7b      	ldrb	r3, [r7, #13]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	8abb      	ldrh	r3, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001d62:	7c3a      	ldrb	r2, [r7, #16]
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	7cbb      	ldrb	r3, [r7, #18]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001d84:	4b3f      	ldr	r3, [pc, #252]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	8aba      	ldrh	r2, [r7, #20]
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001d94:	2310      	movs	r3, #16
 8001d96:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001da0:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001da2:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001da4:	4313      	orrs	r3, r2
 8001da6:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001da8:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001daa:	4313      	orrs	r3, r2
 8001dac:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001db6:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	8aba      	ldrh	r2, [r7, #20]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]
 8001dc8:	e054      	b.n	8001e74 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <BSP_ACCELERO_Init+0x180>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4798      	blx	r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b33      	cmp	r3, #51	; 0x33
 8001dd4:	d14e      	bne.n	8001e74 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001dd8:	4a2b      	ldr	r2, [pc, #172]	; (8001e88 <BSP_ACCELERO_Init+0x180>)
 8001dda:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8001de0:	2340      	movs	r3, #64	; 0x40
 8001de2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8001de4:	2307      	movs	r3, #7
 8001de6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8001de8:	2300      	movs	r3, #0
 8001dea:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8001dec:	2300      	movs	r3, #0
 8001dee:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8001df0:	2300      	movs	r3, #0
 8001df2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8001df4:	2308      	movs	r3, #8
 8001df6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001df8:	7b3a      	ldrb	r2, [r7, #12]
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8001e02:	4313      	orrs	r3, r2
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	8abb      	ldrh	r3, [r7, #20]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001e0e:	7c3a      	ldrb	r2, [r7, #16]
 8001e10:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8001e12:	4313      	orrs	r3, r2
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	7cbb      	ldrb	r3, [r7, #18]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001e30:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	8aba      	ldrh	r2, [r7, #20]
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8001e40:	2310      	movs	r3, #16
 8001e42:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001e4c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8001e4e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8001e54:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001e62:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <BSP_ACCELERO_Init+0x17c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	8aba      	ldrh	r2, [r7, #20]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000034 	.word	0x20000034
 8001e84:	20000194 	.word	0x20000194
 8001e88:	20000000 	.word	0x20000000

08001e8c <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	81fb      	strh	r3, [r7, #14]

  if(AccelerometerDrv->GetXYZ!= NULL)
 8001e98:	4b10      	ldr	r3, [pc, #64]	; (8001edc <BSP_ACCELERO_GetXYZ+0x50>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d018      	beq.n	8001ed4 <BSP_ACCELERO_GetXYZ+0x48>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <BSP_ACCELERO_GetXYZ+0x50>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	4798      	blx	r3

    /* Switch X and Y Axes in case of LSM303DLHC MEMS */
    if(AccelerometerDrv == &Lsm303dlhcDrv)
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <BSP_ACCELERO_GetXYZ+0x50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <BSP_ACCELERO_GetXYZ+0x54>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10e      	bne.n	8001ed4 <BSP_ACCELERO_GetXYZ+0x48>
    {
      SwitchXY  = pDataXYZ[0];
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	801a      	strh	r2, [r3, #0]

      /* Invert Y Axis to be conpliant with LIS3DSH */
      pDataXYZ[1] = -SwitchXY;
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	425b      	negs	r3, r3
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3302      	adds	r3, #2
 8001ed0:	b212      	sxth	r2, r2
 8001ed2:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000194 	.word	0x20000194
 8001ee0:	20000034 	.word	0x20000034

08001ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f000 fa7c 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a19      	ldr	r2, [pc, #100]	; (8001fb8 <HAL_I2C_MspInit+0x84>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d12c      	bne.n	8001fb0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001f72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f84:	2304      	movs	r3, #4
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_I2C_MspInit+0x8c>)
 8001f90:	f000 fa88 	bl	80024a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_I2C_MspInit+0x88>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020400 	.word	0x40020400

08001fc4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_I2C_MspDeInit+0x38>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_I2C_MspDeInit+0x3c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_I2C_MspDeInit+0x3c>)
 8001fdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fe0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(Audio_SCL_GPIO_Port, Audio_SCL_Pin);
 8001fe2:	2140      	movs	r1, #64	; 0x40
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <HAL_I2C_MspDeInit+0x40>)
 8001fe6:	f000 fbe1 	bl	80027ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(Audio_SDA_GPIO_Port, Audio_SDA_Pin);
 8001fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_I2C_MspDeInit+0x40>)
 8001ff0:	f000 fbdc 	bl	80027ac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40005400 	.word	0x40005400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800200c:	e7fe      	b.n	800200c <NMI_Handler+0x4>

0800200e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler+0x4>

08002014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <MemManage_Handler+0x4>

0800201a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <UsageFault_Handler+0x4>

08002026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002054:	f000 f8d0 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <OTG_FS_IRQHandler+0x10>)
 8002062:	f000 fca0 	bl	80029a6 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	200001a0 	.word	0x200001a0

08002070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <_sbrk+0x5c>)
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <_sbrk+0x60>)
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <_sbrk+0x64>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d102      	bne.n	8002092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800208c:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <_sbrk+0x64>)
 800208e:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <_sbrk+0x68>)
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002092:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	429a      	cmp	r2, r3
 800209e:	d207      	bcs.n	80020b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a0:	f003 facc 	bl	800563c <__errno>
 80020a4:	4603      	mov	r3, r0
 80020a6:	220c      	movs	r2, #12
 80020a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	e009      	b.n	80020c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <_sbrk+0x64>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <_sbrk+0x64>)
 80020c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c2:	68fb      	ldr	r3, [r7, #12]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20020000 	.word	0x20020000
 80020d0:	00000400 	.word	0x00000400
 80020d4:	20000198 	.word	0x20000198
 80020d8:	200004b8 	.word	0x200004b8

080020dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <SystemInit+0x20>)
 80020e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <SystemInit+0x20>)
 80020e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002138 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002106:	490e      	ldr	r1, [pc, #56]	; (8002140 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800211c:	4c0b      	ldr	r4, [pc, #44]	; (800214c <LoopFillZerobss+0x26>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800212a:	f7ff ffd7 	bl	80020dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212e:	f003 fa8b 	bl	8005648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002132:	f7ff fa09 	bl	8001548 <main>
  bx  lr    
 8002136:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002138:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	200000e4 	.word	0x200000e4
  ldr r2, =_sidata
 8002144:	080061e0 	.word	0x080061e0
  ldr r2, =_sbss
 8002148:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 800214c:	200004b4 	.word	0x200004b4

08002150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC_IRQHandler>
	...

08002154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_Init+0x40>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <HAL_Init+0x40>)
 800215e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_Init+0x40>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_Init+0x40>)
 800216a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_Init+0x40>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	; (8002194 <HAL_Init+0x40>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800217a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f94f 	bl	8002420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 f808 	bl	8002198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002188:	f7ff feac 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x54>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_InitTick+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f967 	bl	800248a <HAL_SYSTICK_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d80a      	bhi.n	80021e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	f000 f92f 	bl	8002436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <HAL_InitTick+0x5c>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000074 	.word	0x20000074
 80021f0:	2000007c 	.word	0x2000007c
 80021f4:	20000078 	.word	0x20000078

080021f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x24>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4413      	add	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_IncTick+0x24>)
 800220a:	6013      	str	r3, [r2, #0]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2000007c 	.word	0x2000007c
 800221c:	2000019c 	.word	0x2000019c

08002220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return uwTick;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_GetTick+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000019c 	.word	0x2000019c

08002238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff ffee 	bl	8002220 <HAL_GetTick>
 8002244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d005      	beq.n	800225e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_Delay+0x44>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225e:	bf00      	nop
 8002260:	f7ff ffde 	bl	8002220 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	429a      	cmp	r2, r3
 800226e:	d8f7      	bhi.n	8002260 <HAL_Delay+0x28>
  {
  }
}
 8002270:	bf00      	nop
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000007c 	.word	0x2000007c

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <__NVIC_EnableIRQ+0x38>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ec:	d301      	bcc.n	80023f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <SysTick_Config+0x40>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fa:	210f      	movs	r1, #15
 80023fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002400:	f7ff ff8e 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <SysTick_Config+0x40>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <SysTick_Config+0x40>)
 800240c:	2207      	movs	r2, #7
 800240e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	e000e010 	.word	0xe000e010

08002420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff29 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
 8002442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002448:	f7ff ff3e 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 800244c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f7ff ff8e 	bl	8002374 <NVIC_EncodePriority>
 8002458:	4602      	mov	r2, r0
 800245a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff ff5d 	bl	8002320 <__NVIC_SetPriority>
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff31 	bl	80022e4 <__NVIC_EnableIRQ>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ffa2 	bl	80023dc <SysTick_Config>
 8002498:	4603      	mov	r3, r0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b089      	sub	sp, #36	; 0x24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	e159      	b.n	8002774 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	429a      	cmp	r2, r3
 80024da:	f040 8148 	bne.w	800276e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d005      	beq.n	80024f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b03      	cmp	r3, #3
 8002562:	d017      	beq.n	8002594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	2203      	movs	r2, #3
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d123      	bne.n	80025e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	08da      	lsrs	r2, r3, #3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3208      	adds	r2, #8
 80025a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	08da      	lsrs	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3208      	adds	r2, #8
 80025e2:	69b9      	ldr	r1, [r7, #24]
 80025e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	2203      	movs	r2, #3
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0203 	and.w	r2, r3, #3
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80a2 	beq.w	800276e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_GPIO_Init+0x2e8>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a56      	ldr	r2, [pc, #344]	; (800278c <HAL_GPIO_Init+0x2e8>)
 8002634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b54      	ldr	r3, [pc, #336]	; (800278c <HAL_GPIO_Init+0x2e8>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002646:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x2ec>)
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	089b      	lsrs	r3, r3, #2
 800264c:	3302      	adds	r3, #2
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	220f      	movs	r2, #15
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a49      	ldr	r2, [pc, #292]	; (8002794 <HAL_GPIO_Init+0x2f0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d019      	beq.n	80026a6 <HAL_GPIO_Init+0x202>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a48      	ldr	r2, [pc, #288]	; (8002798 <HAL_GPIO_Init+0x2f4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_GPIO_Init+0x1fe>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a47      	ldr	r2, [pc, #284]	; (800279c <HAL_GPIO_Init+0x2f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00d      	beq.n	800269e <HAL_GPIO_Init+0x1fa>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a46      	ldr	r2, [pc, #280]	; (80027a0 <HAL_GPIO_Init+0x2fc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <HAL_GPIO_Init+0x1f6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a45      	ldr	r2, [pc, #276]	; (80027a4 <HAL_GPIO_Init+0x300>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_GPIO_Init+0x1f2>
 8002692:	2304      	movs	r3, #4
 8002694:	e008      	b.n	80026a8 <HAL_GPIO_Init+0x204>
 8002696:	2307      	movs	r3, #7
 8002698:	e006      	b.n	80026a8 <HAL_GPIO_Init+0x204>
 800269a:	2303      	movs	r3, #3
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x204>
 800269e:	2302      	movs	r3, #2
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x204>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x204>
 80026a6:	2300      	movs	r3, #0
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	f002 0203 	and.w	r2, r2, #3
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	; (8002790 <HAL_GPIO_Init+0x2ec>)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_GPIO_Init+0x304>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ea:	4a2f      	ldr	r2, [pc, #188]	; (80027a8 <HAL_GPIO_Init+0x304>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026f0:	4b2d      	ldr	r3, [pc, #180]	; (80027a8 <HAL_GPIO_Init+0x304>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002714:	4a24      	ldr	r2, [pc, #144]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_Init+0x304>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002736:	69ba      	ldr	r2, [r7, #24]
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002744:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002768:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <HAL_GPIO_Init+0x304>)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b0f      	cmp	r3, #15
 8002778:	f67f aea2 	bls.w	80024c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	40013800 	.word	0x40013800
 8002794:	40020000 	.word	0x40020000
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40013c00 	.word	0x40013c00

080027ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e0bb      	b.n	8002940 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c8:	2201      	movs	r2, #1
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4013      	ands	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	429a      	cmp	r2, r3
 80027e0:	f040 80ab 	bne.w	800293a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80027e4:	4a5c      	ldr	r2, [pc, #368]	; (8002958 <HAL_GPIO_DeInit+0x1ac>)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	3302      	adds	r3, #2
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a54      	ldr	r2, [pc, #336]	; (800295c <HAL_GPIO_DeInit+0x1b0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d019      	beq.n	8002842 <HAL_GPIO_DeInit+0x96>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a53      	ldr	r2, [pc, #332]	; (8002960 <HAL_GPIO_DeInit+0x1b4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_DeInit+0x92>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a52      	ldr	r2, [pc, #328]	; (8002964 <HAL_GPIO_DeInit+0x1b8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00d      	beq.n	800283a <HAL_GPIO_DeInit+0x8e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a51      	ldr	r2, [pc, #324]	; (8002968 <HAL_GPIO_DeInit+0x1bc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_DeInit+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a50      	ldr	r2, [pc, #320]	; (800296c <HAL_GPIO_DeInit+0x1c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_GPIO_DeInit+0x86>
 800282e:	2304      	movs	r3, #4
 8002830:	e008      	b.n	8002844 <HAL_GPIO_DeInit+0x98>
 8002832:	2307      	movs	r3, #7
 8002834:	e006      	b.n	8002844 <HAL_GPIO_DeInit+0x98>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_DeInit+0x98>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_DeInit+0x98>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_DeInit+0x98>
 8002842:	2300      	movs	r3, #0
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d132      	bne.n	80028ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002854:	4b46      	ldr	r3, [pc, #280]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	43db      	mvns	r3, r3
 800285c:	4944      	ldr	r1, [pc, #272]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 800285e:	4013      	ands	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	43db      	mvns	r3, r3
 800286a:	4941      	ldr	r1, [pc, #260]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 800286c:	4013      	ands	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002870:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	493d      	ldr	r1, [pc, #244]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 800287a:	4013      	ands	r3, r2
 800287c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800287e:	4b3c      	ldr	r3, [pc, #240]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	493a      	ldr	r1, [pc, #232]	; (8002970 <HAL_GPIO_DeInit+0x1c4>)
 8002888:	4013      	ands	r3, r2
 800288a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800289c:	4a2e      	ldr	r2, [pc, #184]	; (8002958 <HAL_GPIO_DeInit+0x1ac>)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	482a      	ldr	r0, [pc, #168]	; (8002958 <HAL_GPIO_DeInit+0x1ac>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	400a      	ands	r2, r1
 80028b4:	3302      	adds	r3, #2
 80028b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	2103      	movs	r1, #3
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	401a      	ands	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	08da      	lsrs	r2, r3, #3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3208      	adds	r2, #8
 80028d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	08d2      	lsrs	r2, r2, #3
 80028f0:	4019      	ands	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3208      	adds	r2, #8
 80028f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	2103      	movs	r1, #3
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	2101      	movs	r1, #1
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2103      	movs	r1, #3
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	3301      	adds	r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f67f af40 	bls.w	80027c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40013c00 	.word	0x40013c00

08002974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]
 8002980:	4613      	mov	r3, r2
 8002982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002984:	787b      	ldrb	r3, [r7, #1]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800298a:	887a      	ldrh	r2, [r7, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002990:	e003      	b.n	800299a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	041a      	lsls	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	619a      	str	r2, [r3, #24]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fb1c 	bl	8004ffa <USB_GetMode>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	f040 80f6 	bne.w	8002bb6 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f002 fb00 	bl	8004fd4 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80ec 	beq.w	8002bb4 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 faf7 	bl	8004fd4 <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f0:	d104      	bne.n	80029fc <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029fa:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f002 fae7 	bl	8004fd4 <USB_ReadInterrupts>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a10:	d104      	bne.n	8002a1c <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a1a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 fad7 	bl	8004fd4 <USB_ReadInterrupts>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a30:	d104      	bne.n	8002a3c <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fac7 	bl	8004fd4 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d103      	bne.n	8002a58 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2202      	movs	r2, #2
 8002a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fab9 	bl	8004fd4 <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a6c:	d11c      	bne.n	8002aa8 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a76:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10f      	bne.n	8002aa8 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a88:	2110      	movs	r1, #16
 8002a8a:	6938      	ldr	r0, [r7, #16]
 8002a8c:	f002 f9e6 	bl	8004e5c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a90:	6938      	ldr	r0, [r7, #16]
 8002a92:	f002 fa17 	bl	8004ec4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 faba 	bl	8005016 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f002 fd4b 	bl	800553e <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fa91 	bl	8004fd4 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d102      	bne.n	8002ac4 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f001 f829 	bl	8003b16 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 fa83 	bl	8004fd4 <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d106      	bne.n	8002ae6 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f002 fd14 	bl	8005506 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fa72 	bl	8004fd4 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d101      	bne.n	8002afe <HAL_HCD_IRQHandler+0x158>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_HCD_IRQHandler+0x15a>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0210 	bic.w	r2, r2, #16
 8002b12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 ff2c 	bl	8003972 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0210 	orr.w	r2, r2, #16
 8002b28:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 fa50 	bl	8004fd4 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3e:	d13a      	bne.n	8002bb6 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 faa0 	bl	800508a <USB_HC_ReadInterrupt>
 8002b4a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e025      	b.n	8002b9e <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7c:	d106      	bne.n	8002b8c <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	4619      	mov	r1, r3
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 f836 	bl	8002bf6 <HCD_HC_IN_IRQHandler>
 8002b8a:	e005      	b.n	8002b98 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb84 	bl	80032a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3d4      	bcc.n	8002b52 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb0:	615a      	str	r2, [r3, #20]
 8002bb2:	e000      	b.n	8002bb6 <HAL_HCD_IRQHandler+0x210>
      return;
 8002bb4:	bf00      	nop
    }
  }
}
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_HCD_Stop+0x16>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e00d      	b.n	8002bee <HAL_HCD_Stop+0x32>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f002 fb60 	bl	80052a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d11a      	bne.n	8002c5c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	2304      	movs	r3, #4
 8002c36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3361      	adds	r3, #97	; 0x61
 8002c46:	2206      	movs	r2, #6
 8002c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f002 fa29 	bl	80050ac <USB_HC_Halt>
 8002c5a:	e0af      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c72:	d11b      	bne.n	8002cac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	461a      	mov	r2, r3
 8002c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3361      	adds	r3, #97	; 0x61
 8002c96:	2207      	movs	r2, #7
 8002c98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fa01 	bl	80050ac <USB_HC_Halt>
 8002caa:	e087      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d109      	bne.n	8002cd6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	6093      	str	r3, [r2, #8]
 8002cd4:	e072      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b08      	cmp	r3, #8
 8002cea:	d11a      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3361      	adds	r3, #97	; 0x61
 8002d0c:	2205      	movs	r2, #5
 8002d0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 f9c6 	bl	80050ac <USB_HC_Halt>
 8002d20:	e04c      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d38:	d11b      	bne.n	8002d72 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3361      	adds	r3, #97	; 0x61
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f002 f99e 	bl	80050ac <USB_HC_Halt>
 8002d70:	e024      	b.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d119      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3361      	adds	r3, #97	; 0x61
 8002da8:	2206      	movs	r2, #6
 8002daa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 f978 	bl	80050ac <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd2:	d112      	bne.n	8002dfa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 f964 	bl	80050ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002df6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002df8:	e24e      	b.n	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 80df 	bne.w	8002fd0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d019      	beq.n	8002e4e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3348      	adds	r3, #72	; 0x48
 8002e28:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0159      	lsls	r1, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e3c:	1ad2      	subs	r2, r2, r3
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	fb00 f303 	mul.w	r3, r0, r3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3350      	adds	r3, #80	; 0x50
 8002e4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	212c      	movs	r1, #44	; 0x2c
 8002e54:	fb01 f303 	mul.w	r3, r1, r3
 8002e58:	4413      	add	r3, r2
 8002e5a:	3361      	adds	r3, #97	; 0x61
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	212c      	movs	r1, #44	; 0x2c
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	335c      	adds	r3, #92	; 0x5c
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2301      	movs	r3, #1
 8002e82:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	333f      	adds	r3, #63	; 0x3f
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d009      	beq.n	8002eac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	333f      	adds	r3, #63	; 0x3f
 8002ea6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d111      	bne.n	8002ed0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f8f8 	bl	80050ac <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	2310      	movs	r3, #16
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	e03a      	b.n	8002f46 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	333f      	adds	r3, #63	; 0x3f
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d009      	beq.n	8002ef8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	333f      	adds	r3, #63	; 0x3f
 8002ef2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d126      	bne.n	8002f46 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	0151      	lsls	r1, r2, #5
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	440a      	add	r2, r1
 8002f0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f16:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3360      	adds	r3, #96	; 0x60
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	202c      	movs	r0, #44	; 0x2c
 8002f34:	fb00 f303 	mul.w	r3, r0, r3
 8002f38:	4413      	add	r3, r2
 8002f3a:	3360      	adds	r3, #96	; 0x60
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f002 fb0a 	bl	800555a <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d12b      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3348      	adds	r3, #72	; 0x48
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	202c      	movs	r0, #44	; 0x2c
 8002f64:	fb00 f202 	mul.w	r2, r0, r2
 8002f68:	440a      	add	r2, r1
 8002f6a:	3240      	adds	r2, #64	; 0x40
 8002f6c:	8812      	ldrh	r2, [r2, #0]
 8002f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 818e 	beq.w	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3354      	adds	r3, #84	; 0x54
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	f083 0301 	eor.w	r3, r3, #1
 8002f90:	b2d8      	uxtb	r0, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	212c      	movs	r1, #44	; 0x2c
 8002f98:	fb01 f303 	mul.w	r3, r1, r3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	3354      	adds	r3, #84	; 0x54
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	701a      	strb	r2, [r3, #0]
}
 8002fa4:	e178      	b.n	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	212c      	movs	r1, #44	; 0x2c
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3354      	adds	r3, #84	; 0x54
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2d8      	uxtb	r0, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3354      	adds	r3, #84	; 0x54
 8002fca:	4602      	mov	r2, r0
 8002fcc:	701a      	strb	r2, [r3, #0]
}
 8002fce:	e163      	b.n	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	f040 80f6 	bne.w	80031d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	212c      	movs	r1, #44	; 0x2c
 8002fee:	fb01 f303 	mul.w	r3, r1, r3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3361      	adds	r3, #97	; 0x61
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d109      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e0c9      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3361      	adds	r3, #97	; 0x61
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b05      	cmp	r3, #5
 8003022:	d109      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	2205      	movs	r2, #5
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e0b5      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3361      	adds	r3, #97	; 0x61
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b06      	cmp	r3, #6
 800304a:	d009      	beq.n	8003060 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3361      	adds	r3, #97	; 0x61
 800305a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800305c:	2b08      	cmp	r3, #8
 800305e:	d150      	bne.n	8003102 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	335c      	adds	r3, #92	; 0x5c
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	335c      	adds	r3, #92	; 0x5c
 8003080:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	335c      	adds	r3, #92	; 0x5c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d912      	bls.n	80030bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	335c      	adds	r3, #92	; 0x5c
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3360      	adds	r3, #96	; 0x60
 80030b6:	2204      	movs	r2, #4
 80030b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030ba:	e073      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3360      	adds	r3, #96	; 0x60
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	015a      	lsls	r2, r3, #5
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	4413      	add	r3, r2
 80030f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003100:	e050      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d122      	bne.n	800315c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3360      	adds	r3, #96	; 0x60
 8003124:	2202      	movs	r2, #2
 8003126:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800313e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003146:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e023      	b.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	212c      	movs	r1, #44	; 0x2c
 8003162:	fb01 f303 	mul.w	r3, r1, r3
 8003166:	4413      	add	r3, r2
 8003168:	3361      	adds	r3, #97	; 0x61
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b07      	cmp	r3, #7
 800316e:	d119      	bne.n	80031a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	335c      	adds	r3, #92	; 0x5c
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	202c      	movs	r0, #44	; 0x2c
 8003188:	fb00 f303 	mul.w	r3, r0, r3
 800318c:	440b      	add	r3, r1
 800318e:	335c      	adds	r3, #92	; 0x5c
 8003190:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3360      	adds	r3, #96	; 0x60
 80031a0:	2204      	movs	r2, #4
 80031a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	015a      	lsls	r2, r3, #5
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	4413      	add	r3, r2
 80031ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b0:	461a      	mov	r2, r3
 80031b2:	2302      	movs	r3, #2
 80031b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	b2d9      	uxtb	r1, r3
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	202c      	movs	r0, #44	; 0x2c
 80031c0:	fb00 f303 	mul.w	r3, r0, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3360      	adds	r3, #96	; 0x60
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f002 f9c4 	bl	800555a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031d2:	e061      	b.n	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d156      	bne.n	8003298 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	333f      	adds	r3, #63	; 0x3f
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d111      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	335c      	adds	r3, #92	; 0x5c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	4611      	mov	r1, r2
 800321a:	4618      	mov	r0, r3
 800321c:	f001 ff46 	bl	80050ac <USB_HC_Halt>
 8003220:	e031      	b.n	8003286 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	333f      	adds	r3, #63	; 0x3f
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	333f      	adds	r3, #63	; 0x3f
 8003244:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003246:	2b02      	cmp	r3, #2
 8003248:	d11d      	bne.n	8003286 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d110      	bne.n	8003286 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	3361      	adds	r3, #97	; 0x61
 8003272:	2203      	movs	r2, #3
 8003274:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f001 ff13 	bl	80050ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	2310      	movs	r3, #16
 8003296:	6093      	str	r3, [r2, #8]
}
 8003298:	bf00      	nop
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d11a      	bne.n	8003306 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	461a      	mov	r2, r3
 80032de:	2304      	movs	r3, #4
 80032e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	3361      	adds	r3, #97	; 0x61
 80032f0:	2206      	movs	r2, #6
 80032f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 fed4 	bl	80050ac <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003304:	e331      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d12e      	bne.n	800337a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2320      	movs	r3, #32
 800332c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	333d      	adds	r3, #61	; 0x3d
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	f040 8313 	bne.w	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	212c      	movs	r1, #44	; 0x2c
 800334a:	fb01 f303 	mul.w	r3, r1, r3
 800334e:	4413      	add	r3, r2
 8003350:	333d      	adds	r3, #61	; 0x3d
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	212c      	movs	r1, #44	; 0x2c
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	4413      	add	r3, r2
 8003362:	3360      	adds	r3, #96	; 0x60
 8003364:	2202      	movs	r2, #2
 8003366:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fe9a 	bl	80050ac <USB_HC_Halt>
}
 8003378:	e2f7      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800338c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003390:	d112      	bne.n	80033b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339e:	461a      	mov	r2, r3
 80033a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 fe7b 	bl	80050ac <USB_HC_Halt>
}
 80033b6:	e2d8      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d140      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	335c      	adds	r3, #92	; 0x5c
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b40      	cmp	r3, #64	; 0x40
 80033f4:	d111      	bne.n	800341a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	333d      	adds	r3, #61	; 0x3d
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2340      	movs	r3, #64	; 0x40
 8003418:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	461a      	mov	r2, r3
 8003428:	2301      	movs	r3, #1
 800342a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3361      	adds	r3, #97	; 0x61
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	4611      	mov	r1, r2
 8003448:	4618      	mov	r0, r3
 800344a:	f001 fe2f 	bl	80050ac <USB_HC_Halt>
}
 800344e:	e28c      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d12c      	bne.n	80034c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	212c      	movs	r1, #44	; 0x2c
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	4413      	add	r3, r2
 8003472:	3361      	adds	r3, #97	; 0x61
 8003474:	2204      	movs	r2, #4
 8003476:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	333d      	adds	r3, #61	; 0x3d
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	335c      	adds	r3, #92	; 0x5c
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fe00 	bl	80050ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	461a      	mov	r2, r3
 80034ba:	2340      	movs	r3, #64	; 0x40
 80034bc:	6093      	str	r3, [r2, #8]
}
 80034be:	e254      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11a      	bne.n	800350c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e2:	461a      	mov	r2, r3
 80034e4:	2308      	movs	r3, #8
 80034e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3361      	adds	r3, #97	; 0x61
 80034f6:	2205      	movs	r2, #5
 80034f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fdd1 	bl	80050ac <USB_HC_Halt>
}
 800350a:	e22e      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b10      	cmp	r3, #16
 8003520:	d140      	bne.n	80035a4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	335c      	adds	r3, #92	; 0x5c
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	2203      	movs	r2, #3
 8003544:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333d      	adds	r3, #61	; 0x3d
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d112      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	333c      	adds	r3, #60	; 0x3c
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	333d      	adds	r3, #61	; 0x3d
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fd8e 	bl	80050ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2310      	movs	r3, #16
 80035a0:	6093      	str	r3, [r2, #8]
}
 80035a2:	e1e2      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d164      	bne.n	8003684 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d111      	bne.n	80035e6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	212c      	movs	r1, #44	; 0x2c
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	3361      	adds	r3, #97	; 0x61
 80035d0:	2206      	movs	r2, #6
 80035d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fd64 	bl	80050ac <USB_HC_Halt>
 80035e4:	e044      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	212c      	movs	r1, #44	; 0x2c
 80035ec:	fb01 f303 	mul.w	r3, r1, r3
 80035f0:	4413      	add	r3, r2
 80035f2:	335c      	adds	r3, #92	; 0x5c
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1c5a      	adds	r2, r3, #1
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	202c      	movs	r0, #44	; 0x2c
 80035fe:	fb00 f303 	mul.w	r3, r0, r3
 8003602:	440b      	add	r3, r1
 8003604:	335c      	adds	r3, #92	; 0x5c
 8003606:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	335c      	adds	r3, #92	; 0x5c
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d920      	bls.n	800365e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	335c      	adds	r3, #92	; 0x5c
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	212c      	movs	r1, #44	; 0x2c
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	4413      	add	r3, r2
 800363a:	3360      	adds	r3, #96	; 0x60
 800363c:	2204      	movs	r2, #4
 800363e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	b2d9      	uxtb	r1, r3
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	4413      	add	r3, r2
 8003650:	3360      	adds	r3, #96	; 0x60
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f001 ff7f 	bl	800555a <HAL_HCD_HC_NotifyURBChange_Callback>
 800365c:	e008      	b.n	8003670 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	212c      	movs	r1, #44	; 0x2c
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	4413      	add	r3, r2
 800366a:	3360      	adds	r3, #96	; 0x60
 800366c:	2202      	movs	r2, #2
 800366e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	461a      	mov	r2, r3
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	6093      	str	r3, [r2, #8]
}
 8003682:	e172      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d11b      	bne.n	80036d4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	212c      	movs	r1, #44	; 0x2c
 80036a2:	fb01 f303 	mul.w	r3, r1, r3
 80036a6:	4413      	add	r3, r2
 80036a8:	3361      	adds	r3, #97	; 0x61
 80036aa:	2208      	movs	r2, #8
 80036ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fcf7 	bl	80050ac <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	461a      	mov	r2, r3
 80036cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d0:	6093      	str	r3, [r2, #8]
}
 80036d2:	e14a      	b.n	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	f040 813f 	bne.w	800396a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3361      	adds	r3, #97	; 0x61
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d17d      	bne.n	80037fc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3360      	adds	r3, #96	; 0x60
 800370e:	2201      	movs	r2, #1
 8003710:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	333f      	adds	r3, #63	; 0x3f
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d00a      	beq.n	800373c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	333f      	adds	r3, #63	; 0x3f
 8003734:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003736:	2b03      	cmp	r3, #3
 8003738:	f040 8100 	bne.w	800393c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d113      	bne.n	800376c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3355      	adds	r3, #85	; 0x55
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	f083 0301 	eor.w	r3, r3, #1
 8003758:	b2d8      	uxtb	r0, r3
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	3355      	adds	r3, #85	; 0x55
 8003768:	4602      	mov	r2, r0
 800376a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 80e3 	bne.w	800393c <HCD_HC_OUT_IRQHandler+0x69c>
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80d8 	beq.w	800393c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	334c      	adds	r3, #76	; 0x4c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	202c      	movs	r0, #44	; 0x2c
 80037a2:	fb00 f202 	mul.w	r2, r0, r2
 80037a6:	440a      	add	r2, r1
 80037a8:	3240      	adds	r2, #64	; 0x40
 80037aa:	8812      	ldrh	r2, [r2, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	202c      	movs	r0, #44	; 0x2c
 80037b6:	fb00 f202 	mul.w	r2, r0, r2
 80037ba:	440a      	add	r2, r1
 80037bc:	3240      	adds	r2, #64	; 0x40
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80b5 	beq.w	800393c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3355      	adds	r3, #85	; 0x55
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	f083 0301 	eor.w	r3, r3, #1
 80037e6:	b2d8      	uxtb	r0, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	212c      	movs	r1, #44	; 0x2c
 80037ee:	fb01 f303 	mul.w	r3, r1, r3
 80037f2:	4413      	add	r3, r2
 80037f4:	3355      	adds	r3, #85	; 0x55
 80037f6:	4602      	mov	r2, r0
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e09f      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	fb01 f303 	mul.w	r3, r1, r3
 8003806:	4413      	add	r3, r2
 8003808:	3361      	adds	r3, #97	; 0x61
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b03      	cmp	r3, #3
 800380e:	d109      	bne.n	8003824 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3360      	adds	r3, #96	; 0x60
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
 8003822:	e08b      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	3361      	adds	r3, #97	; 0x61
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d109      	bne.n	800384c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3360      	adds	r3, #96	; 0x60
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e077      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	212c      	movs	r1, #44	; 0x2c
 8003852:	fb01 f303 	mul.w	r3, r1, r3
 8003856:	4413      	add	r3, r2
 8003858:	3361      	adds	r3, #97	; 0x61
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b05      	cmp	r3, #5
 800385e:	d109      	bne.n	8003874 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3360      	adds	r3, #96	; 0x60
 800386e:	2205      	movs	r2, #5
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e063      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3361      	adds	r3, #97	; 0x61
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b06      	cmp	r3, #6
 8003886:	d009      	beq.n	800389c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	212c      	movs	r1, #44	; 0x2c
 800388e:	fb01 f303 	mul.w	r3, r1, r3
 8003892:	4413      	add	r3, r2
 8003894:	3361      	adds	r3, #97	; 0x61
 8003896:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003898:	2b08      	cmp	r3, #8
 800389a:	d14f      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	335c      	adds	r3, #92	; 0x5c
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	202c      	movs	r0, #44	; 0x2c
 80038b4:	fb00 f303 	mul.w	r3, r0, r3
 80038b8:	440b      	add	r3, r1
 80038ba:	335c      	adds	r3, #92	; 0x5c
 80038bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	335c      	adds	r3, #92	; 0x5c
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d912      	bls.n	80038f8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	212c      	movs	r1, #44	; 0x2c
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	3360      	adds	r3, #96	; 0x60
 80038f2:	2204      	movs	r2, #4
 80038f4:	701a      	strb	r2, [r3, #0]
 80038f6:	e021      	b.n	800393c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	212c      	movs	r1, #44	; 0x2c
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	4413      	add	r3, r2
 8003904:	3360      	adds	r3, #96	; 0x60
 8003906:	2202      	movs	r2, #2
 8003908:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003920:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003928:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	4413      	add	r3, r2
 8003932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003936:	461a      	mov	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003948:	461a      	mov	r2, r3
 800394a:	2302      	movs	r3, #2
 800394c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	b2d9      	uxtb	r1, r3
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	202c      	movs	r0, #44	; 0x2c
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	4413      	add	r3, r2
 800395e:	3360      	adds	r3, #96	; 0x60
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f001 fdf8 	bl	800555a <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800396a:	bf00      	nop
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b08a      	sub	sp, #40	; 0x28
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	0c5b      	lsrs	r3, r3, #17
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039a6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d004      	beq.n	80039b8 <HCD_RXQLVL_IRQHandler+0x46>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	f000 80a9 	beq.w	8003b08 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80039b6:	e0aa      	b.n	8003b0e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80a6 	beq.w	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3344      	adds	r3, #68	; 0x44
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 809b 	beq.w	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3350      	adds	r3, #80	; 0x50
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	441a      	add	r2, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	202c      	movs	r0, #44	; 0x2c
 80039f0:	fb00 f303 	mul.w	r3, r0, r3
 80039f4:	440b      	add	r3, r1
 80039f6:	334c      	adds	r3, #76	; 0x4c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d87a      	bhi.n	8003af4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3344      	adds	r3, #68	; 0x44
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	f001 fa84 	bl	8004f24 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3344      	adds	r3, #68	; 0x44
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	441a      	add	r2, r3
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	202c      	movs	r0, #44	; 0x2c
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3344      	adds	r3, #68	; 0x44
 8003a3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	212c      	movs	r1, #44	; 0x2c
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3350      	adds	r3, #80	; 0x50
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	441a      	add	r2, r3
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	202c      	movs	r0, #44	; 0x2c
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	440b      	add	r3, r1
 8003a60:	3350      	adds	r3, #80	; 0x50
 8003a62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	0cdb      	lsrs	r3, r3, #19
 8003a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	212c      	movs	r1, #44	; 0x2c
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	4413      	add	r3, r2
 8003a86:	3340      	adds	r3, #64	; 0x40
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d13c      	bne.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d039      	beq.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003aae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	212c      	movs	r1, #44	; 0x2c
 8003ad0:	fb01 f303 	mul.w	r3, r1, r3
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3354      	adds	r3, #84	; 0x54
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2d8      	uxtb	r0, r3
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	212c      	movs	r1, #44	; 0x2c
 8003ae6:	fb01 f303 	mul.w	r3, r1, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	3354      	adds	r3, #84	; 0x54
 8003aee:	4602      	mov	r2, r0
 8003af0:	701a      	strb	r2, [r3, #0]
      break;
 8003af2:	e00b      	b.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	212c      	movs	r1, #44	; 0x2c
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3360      	adds	r3, #96	; 0x60
 8003b02:	2204      	movs	r2, #4
 8003b04:	701a      	strb	r2, [r3, #0]
      break;
 8003b06:	e001      	b.n	8003b0c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b0c:	bf00      	nop
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3728      	adds	r7, #40	; 0x28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b42:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d10b      	bne.n	8003b66 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d102      	bne.n	8003b5e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f001 fce2 	bl	8005522 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0302 	orr.w	r3, r3, #2
 8003b64:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d132      	bne.n	8003bd6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f043 0308 	orr.w	r3, r3, #8
 8003b76:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d126      	bne.n	8003bd0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d113      	bne.n	8003bb2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b94:	d106      	bne.n	8003ba4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 fa3a 	bl	8005016 <USB_InitFSLSPClkSel>
 8003ba2:	e011      	b.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 fa33 	bl	8005016 <USB_InitFSLSPClkSel>
 8003bb0:	e00a      	b.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003bc6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f001 fcd4 	bl	8005576 <HAL_HCD_PortEnabled_Callback>
 8003bce:	e002      	b.n	8003bd6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f001 fcde 	bl	8005592 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d103      	bne.n	8003be8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f043 0320 	orr.w	r3, r3, #32
 8003be6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e12b      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fe f986 	bl	8001f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2224      	movs	r2, #36	; 0x24
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c60:	f000 ffd6 	bl	8004c10 <HAL_RCC_GetPCLK1Freq>
 8003c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4a81      	ldr	r2, [pc, #516]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d807      	bhi.n	8003c80 <HAL_I2C_Init+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a80      	ldr	r2, [pc, #512]	; (8003e74 <HAL_I2C_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e006      	b.n	8003c8e <HAL_I2C_Init+0x92>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_I2C_Init+0x27c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf94      	ite	ls
 8003c88:	2301      	movls	r3, #1
 8003c8a:	2300      	movhi	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a78      	ldr	r2, [pc, #480]	; (8003e7c <HAL_I2C_Init+0x280>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9b      	lsrs	r3, r3, #18
 8003ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d802      	bhi.n	8003cd0 <HAL_I2C_Init+0xd4>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	e009      	b.n	8003ce4 <HAL_I2C_Init+0xe8>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	4a69      	ldr	r2, [pc, #420]	; (8003e80 <HAL_I2C_Init+0x284>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	099b      	lsrs	r3, r3, #6
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	495c      	ldr	r1, [pc, #368]	; (8003e70 <HAL_I2C_Init+0x274>)
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d819      	bhi.n	8003d38 <HAL_I2C_Init+0x13c>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1e59      	subs	r1, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d12:	1c59      	adds	r1, r3, #1
 8003d14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d18:	400b      	ands	r3, r1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_I2C_Init+0x138>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1e59      	subs	r1, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	e051      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d34:	2304      	movs	r3, #4
 8003d36:	e04f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d111      	bne.n	8003d64 <HAL_I2C_Init+0x168>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e012      	b.n	8003d8a <HAL_I2C_Init+0x18e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	0099      	lsls	r1, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x196>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e022      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10e      	bne.n	8003db8 <HAL_I2C_Init+0x1bc>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1e58      	subs	r0, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	460b      	mov	r3, r1
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	440b      	add	r3, r1
 8003da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003db6:	e00f      	b.n	8003dd8 <HAL_I2C_Init+0x1dc>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1e58      	subs	r0, r3, #1
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	0099      	lsls	r1, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	6809      	ldr	r1, [r1, #0]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6911      	ldr	r1, [r2, #16]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68d2      	ldr	r2, [r2, #12]
 8003e12:	4311      	orrs	r1, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695a      	ldr	r2, [r3, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	000186a0 	.word	0x000186a0
 8003e74:	001e847f 	.word	0x001e847f
 8003e78:	003d08ff 	.word	0x003d08ff
 8003e7c:	431bde83 	.word	0x431bde83
 8003e80:	10624dd3 	.word	0x10624dd3

08003e84 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e021      	b.n	8003eda <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe f888 	bl	8001fc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7fe f98f 	bl	8002220 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 80d9 	bne.w	80040c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	496d      	ldr	r1, [pc, #436]	; (80040d0 <HAL_I2C_Mem_Write+0x1ec>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 fc8d 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e0cc      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Mem_Write+0x56>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e0c5      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d007      	beq.n	8003f60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2221      	movs	r2, #33	; 0x21
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a4d      	ldr	r2, [pc, #308]	; (80040d4 <HAL_I2C_Mem_Write+0x1f0>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa2:	88f8      	ldrh	r0, [r7, #6]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fac4 	bl	8004540 <I2C_RequestMemoryWrite>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d052      	beq.n	8004064 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e081      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fd0e 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00d      	beq.n	8003fee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d107      	bne.n	8003fea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fe8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e06b      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d11b      	bne.n	8004064 <HAL_I2C_Mem_Write+0x180>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	d017      	beq.n	8004064 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1aa      	bne.n	8003fc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fcfa 	bl	8004a6a <I2C_WaitOnBTFFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	2b04      	cmp	r3, #4
 8004082:	d107      	bne.n	8004094 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e016      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	00100002 	.word	0x00100002
 80040d4:	ffff0000 	.word	0xffff0000

080040d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040f2:	f7fe f895 	bl	8002220 <HAL_GetTick>
 80040f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 8208 	bne.w	8004516 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2319      	movs	r3, #25
 800410c:	2201      	movs	r2, #1
 800410e:	497b      	ldr	r1, [pc, #492]	; (80042fc <HAL_I2C_Mem_Read+0x224>)
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb93 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800411c:	2302      	movs	r3, #2
 800411e:	e1fb      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_I2C_Mem_Read+0x56>
 800412a:	2302      	movs	r3, #2
 800412c:	e1f4      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d007      	beq.n	8004154 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004162:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2222      	movs	r2, #34	; 0x22
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2240      	movs	r2, #64	; 0x40
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004184:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a5b      	ldr	r2, [pc, #364]	; (8004300 <HAL_I2C_Mem_Read+0x228>)
 8004194:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004196:	88f8      	ldrh	r0, [r7, #6]
 8004198:	893a      	ldrh	r2, [r7, #8]
 800419a:	8979      	ldrh	r1, [r7, #10]
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4603      	mov	r3, r0
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f000 fa60 	bl	800466c <I2C_RequestMemoryRead>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e1b0      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d113      	bne.n	80041e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e184      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d11b      	bne.n	8004226 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041fe:	2300      	movs	r3, #0
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e164      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422a:	2b02      	cmp	r3, #2
 800422c:	d11b      	bne.n	8004266 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800424c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	e144      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800427c:	e138      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	2b03      	cmp	r3, #3
 8004284:	f200 80f1 	bhi.w	800446a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428c:	2b01      	cmp	r3, #1
 800428e:	d123      	bne.n	80042d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fc29 	bl	8004aec <I2C_WaitOnRXNEFlagUntilTimeout>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e139      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042d6:	e10b      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d14e      	bne.n	800437e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e6:	2200      	movs	r2, #0
 80042e8:	4906      	ldr	r1, [pc, #24]	; (8004304 <HAL_I2C_Mem_Read+0x22c>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 faa6 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d008      	beq.n	8004308 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e10e      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
 80042fa:	bf00      	nop
 80042fc:	00100002 	.word	0x00100002
 8004300:	ffff0000 	.word	0xffff0000
 8004304:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004316:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800437c:	e0b8      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004384:	2200      	movs	r2, #0
 8004386:	4966      	ldr	r1, [pc, #408]	; (8004520 <HAL_I2C_Mem_Read+0x448>)
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fa57 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0bf      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	494f      	ldr	r1, [pc, #316]	; (8004520 <HAL_I2C_Mem_Read+0x448>)
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 fa29 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e091      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442c:	b29b      	uxth	r3, r3
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004468:	e042      	b.n	80044f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 fb3c 	bl	8004aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e04c      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d118      	bne.n	80044f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f aec2 	bne.w	800427e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
  }
}
 8004518:	4618      	mov	r0, r3
 800451a:	3728      	adds	r7, #40	; 0x28
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	00010004 	.word	0x00010004

08004524 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	817b      	strh	r3, [r7, #10]
 8004552:	460b      	mov	r3, r1
 8004554:	813b      	strh	r3, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	2200      	movs	r2, #0
 8004572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 f960 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004590:	d103      	bne.n	800459a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e05f      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	492d      	ldr	r1, [pc, #180]	; (8004668 <I2C_RequestMemoryWrite+0x128>)
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f998 	bl	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e04c      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045dc:	6a39      	ldr	r1, [r7, #32]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fa02 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b04      	cmp	r3, #4
 80045f0:	d107      	bne.n	8004602 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e02b      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d105      	bne.n	8004618 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460c:	893b      	ldrh	r3, [r7, #8]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	e021      	b.n	800465c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004618:	893b      	ldrh	r3, [r7, #8]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	b29b      	uxth	r3, r3
 800461e:	b2da      	uxtb	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004628:	6a39      	ldr	r1, [r7, #32]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9dc 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00d      	beq.n	8004652 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	2b04      	cmp	r3, #4
 800463c:	d107      	bne.n	800464e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e005      	b.n	800465e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004652:	893b      	ldrh	r3, [r7, #8]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	00010002 	.word	0x00010002

0800466c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	4608      	mov	r0, r1
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	4603      	mov	r3, r0
 800467c:	817b      	strh	r3, [r7, #10]
 800467e:	460b      	mov	r3, r1
 8004680:	813b      	strh	r3, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004694:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8c2 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046cc:	d103      	bne.n	80046d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0aa      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	6a3a      	ldr	r2, [r7, #32]
 80046ee:	4952      	ldr	r1, [pc, #328]	; (8004838 <I2C_RequestMemoryRead+0x1cc>)
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f8fa 	bl	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e097      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004718:	6a39      	ldr	r1, [r7, #32]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f964 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00d      	beq.n	8004742 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	2b04      	cmp	r3, #4
 800472c:	d107      	bne.n	800473e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e076      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004748:	893b      	ldrh	r3, [r7, #8]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]
 8004752:	e021      	b.n	8004798 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004754:	893b      	ldrh	r3, [r7, #8]
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	b29b      	uxth	r3, r3
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 f93e 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004788:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e050      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800478e:	893b      	ldrh	r3, [r7, #8]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479a:	6a39      	ldr	r1, [r7, #32]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f923 	bl	80049e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d107      	bne.n	80047c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e035      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2200      	movs	r2, #0
 80047dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f82b 	bl	800483c <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047fa:	d103      	bne.n	8004804 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004802:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e013      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004808:	897b      	ldrh	r3, [r7, #10]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	b2da      	uxtb	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <I2C_RequestMemoryRead+0x1cc>)
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f863 	bl	80048ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	00010002 	.word	0x00010002

0800483c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800484c:	e025      	b.n	800489a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d021      	beq.n	800489a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fd fce3 	bl	8002220 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d116      	bne.n	800489a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e023      	b.n	80048e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d10d      	bne.n	80048c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	e00c      	b.n	80048da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	43da      	mvns	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4013      	ands	r3, r2
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	bf0c      	ite	eq
 80048d2:	2301      	moveq	r3, #1
 80048d4:	2300      	movne	r3, #0
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d0b6      	beq.n	800484e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	607a      	str	r2, [r7, #4]
 80048f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f8:	e051      	b.n	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004908:	d123      	bne.n	8004952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004922:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2220      	movs	r2, #32
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	f043 0204 	orr.w	r2, r3, #4
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e046      	b.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d021      	beq.n	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fd fc61 	bl	8002220 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d116      	bne.n	800499e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e020      	b.n	80049e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	0c1b      	lsrs	r3, r3, #16
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10c      	bne.n	80049c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	43da      	mvns	r2, r3
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bf14      	ite	ne
 80049ba:	2301      	movne	r3, #1
 80049bc:	2300      	moveq	r3, #0
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	e00b      	b.n	80049da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	43da      	mvns	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4013      	ands	r3, r2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf14      	ite	ne
 80049d4:	2301      	movne	r3, #1
 80049d6:	2300      	moveq	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d18d      	bne.n	80048fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f4:	e02d      	b.n	8004a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f8ce 	bl	8004b98 <I2C_IsAcknowledgeFailed>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e02d      	b.n	8004a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d021      	beq.n	8004a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0e:	f7fd fc07 	bl	8002220 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d302      	bcc.n	8004a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d116      	bne.n	8004a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f043 0220 	orr.w	r2, r3, #32
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e007      	b.n	8004a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d1ca      	bne.n	80049f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a76:	e02d      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 f88d 	bl	8004b98 <I2C_IsAcknowledgeFailed>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e02d      	b.n	8004ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d021      	beq.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fd fbc6 	bl	8002220 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	f043 0220 	orr.w	r2, r3, #32
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e007      	b.n	8004ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d1ca      	bne.n	8004a78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af8:	e042      	b.n	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d119      	bne.n	8004b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0210 	mvn.w	r2, #16
 8004b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e029      	b.n	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3c:	f7fd fb70 	bl	8002220 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d116      	bne.n	8004b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f043 0220 	orr.w	r2, r3, #32
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8a:	2b40      	cmp	r3, #64	; 0x40
 8004b8c:	d1b5      	bne.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bae:	d11b      	bne.n	8004be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f043 0204 	orr.w	r2, r3, #4
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
	...

08004bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000074 	.word	0x20000074

08004c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c14:	f7ff fff0 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0a9b      	lsrs	r3, r3, #10
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800619c 	.word	0x0800619c

08004c38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d038      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c60:	4b68      	ldr	r3, [pc, #416]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c66:	f7fd fadb 	bl	8002220 <HAL_GetTick>
 8004c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c6e:	f7fd fad7 	bl	8002220 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0bd      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c80:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	019b      	lsls	r3, r3, #6
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	071b      	lsls	r3, r3, #28
 8004c9e:	495a      	ldr	r1, [pc, #360]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ca6:	4b57      	ldr	r3, [pc, #348]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cac:	f7fd fab8 	bl	8002220 <HAL_GetTick>
 8004cb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cb4:	f7fd fab4 	bl	8002220 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e09a      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc6:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8083 	beq.w	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	4b48      	ldr	r3, [pc, #288]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	4a47      	ldr	r2, [pc, #284]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf0:	4b45      	ldr	r3, [pc, #276]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cfc:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a42      	ldr	r2, [pc, #264]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d08:	f7fd fa8a 	bl	8002220 <HAL_GetTick>
 8004d0c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fd fa86 	bl	8002220 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e06c      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d22:	4b3a      	ldr	r3, [pc, #232]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d36:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d02f      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d028      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d54:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d5c:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d68:	4b27      	ldr	r3, [pc, #156]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d114      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d74:	f7fd fa54 	bl	8002220 <HAL_GetTick>
 8004d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fd fa50 	bl	8002220 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e034      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	4b1d      	ldr	r3, [pc, #116]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ee      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004dac:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc0:	4911      	ldr	r1, [pc, #68]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
 8004dc6:	e005      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dd2:	6093      	str	r3, [r2, #8]
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de0:	4909      	ldr	r1, [pc, #36]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7d1a      	ldrb	r2, [r3, #20]
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004df8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	42470068 	.word	0x42470068
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	42470e40 	.word	0x42470e40
 8004e14:	424711e0 	.word	0x424711e0

08004e18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f043 0201 	orr.w	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e01b      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	daf2      	bge.n	8004e6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	019b      	lsls	r3, r3, #6
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <USB_FlushTxFifo+0x64>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e006      	b.n	8004eb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d0f0      	beq.n	8004e94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	00030d40 	.word	0x00030d40

08004ec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e018      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	daf2      	bge.n	8004ed0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <USB_FlushRxFifo+0x5c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e006      	b.n	8004f14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d0f0      	beq.n	8004ef4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	00030d40 	.word	0x00030d40

08004f24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b08b      	sub	sp, #44	; 0x2c
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004f42:	88fb      	ldrh	r3, [r7, #6]
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
 8004f4e:	e014      	b.n	8004f7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	3301      	adds	r3, #1
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	3301      	adds	r3, #1
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	3301      	adds	r3, #1
 8004f72:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	3301      	adds	r3, #1
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	6a3a      	ldr	r2, [r7, #32]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d3e6      	bcc.n	8004f50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004f82:	8bfb      	ldrh	r3, [r7, #30]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01e      	beq.n	8004fc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f92:	461a      	mov	r2, r3
 8004f94:	f107 0310 	add.w	r3, r7, #16
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	701a      	strb	r2, [r3, #0]
      i++;
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004fba:	8bfb      	ldrh	r3, [r7, #30]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004fc0:	8bfb      	ldrh	r3, [r7, #30]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ea      	bne.n	8004f9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	372c      	adds	r7, #44	; 0x2c
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fec:	68fb      	ldr	r3, [r7, #12]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f003 0301 	and.w	r3, r3, #1
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	78fb      	ldrb	r3, [r7, #3]
 8005044:	f003 0303 	and.w	r3, r3, #3
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505e:	461a      	mov	r2, r3
 8005060:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005064:	6053      	str	r3, [r2, #4]
 8005066:	e009      	b.n	800507c <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d106      	bne.n	800507c <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005074:	461a      	mov	r2, r3
 8005076:	f241 7370 	movw	r3, #6000	; 0x1770
 800507a:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	b29b      	uxth	r3, r3
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	0c9b      	lsrs	r3, r3, #18
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	0fdb      	lsrs	r3, r3, #31
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d104      	bne.n	8005106 <USB_HC_Halt+0x5a>
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e0c8      	b.n	8005298 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <USB_HC_Halt+0x66>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d163      	bne.n	80051da <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	0151      	lsls	r1, r2, #5
 8005124:	69fa      	ldr	r2, [r7, #28]
 8005126:	440a      	add	r2, r1
 8005128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800512c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005130:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	f040 80ab 	bne.w	8005296 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d133      	bne.n	80051b4 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800516a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4413      	add	r3, r2
 8005174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	0151      	lsls	r1, r2, #5
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	440a      	add	r2, r1
 8005182:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005186:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800518a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	3301      	adds	r3, #1
 8005190:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005198:	d81d      	bhi.n	80051d6 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051b0:	d0ec      	beq.n	800518c <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051b2:	e070      	b.n	8005296 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	0151      	lsls	r1, r2, #5
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	440a      	add	r2, r1
 80051ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051d4:	e05f      	b.n	8005296 <USB_HC_Halt+0x1ea>
            break;
 80051d6:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051d8:	e05d      	b.n	8005296 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d133      	bne.n	8005272 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	440a      	add	r2, r1
 8005220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005224:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005228:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69ba      	ldr	r2, [r7, #24]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	440a      	add	r2, r1
 8005240:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005248:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005256:	d81d      	bhi.n	8005294 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800526a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526e:	d0ec      	beq.n	800524a <USB_HC_Halt+0x19e>
 8005270:	e011      	b.n	8005296 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	440a      	add	r2, r1
 8005288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	e000      	b.n	8005296 <USB_HC_Halt+0x1ea>
          break;
 8005294:	bf00      	nop
    }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3724      	adds	r7, #36	; 0x24
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80052b4:	2300      	movs	r3, #0
 80052b6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fdbe 	bl	8004e3a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052be:	2110      	movs	r1, #16
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f7ff fdcb 	bl	8004e5c <USB_FlushTxFifo>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fdf7 	bl	8004ec4 <USB_FlushRxFifo>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80052e0:	2300      	movs	r3, #0
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e01f      	b.n	8005326 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005304:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800530c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	3301      	adds	r3, #1
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b0f      	cmp	r3, #15
 800532a:	d9dc      	bls.n	80052e6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800532c:	2300      	movs	r3, #0
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	e034      	b.n	800539c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005348:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005350:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005358:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	461a      	mov	r2, r3
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3301      	adds	r3, #1
 8005370:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005378:	d80c      	bhi.n	8005394 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005390:	d0ec      	beq.n	800536c <USB_StopHost+0xc8>
 8005392:	e000      	b.n	8005396 <USB_StopHost+0xf2>
        break;
 8005394:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	3301      	adds	r3, #1
 800539a:	61bb      	str	r3, [r7, #24]
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d9c7      	bls.n	8005332 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a8:	461a      	mov	r2, r3
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295
 80053ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f04f 32ff 	mov.w	r2, #4294967295
 80053b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fd2d 	bl	8004e18 <USB_EnableGlobalInt>

  return ret;
 80053be:	7ffb      	ldrb	r3, [r7, #31]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3720      	adds	r7, #32
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f804 	bl	80053ec <USBH_HandleSof>
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b0b      	cmp	r3, #11
 80053fc:	d10a      	bne.n	8005414 <USBH_HandleSof+0x28>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
  }
}
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800542c:	bf00      	nop
}
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005448:	bf00      	nop
}
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f883 	bl	80055ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	791b      	ldrb	r3, [r3, #4]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f80b 	bl	80054ca <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	795b      	ldrb	r3, [r3, #5]
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f805 	bl	80054ca <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	2b0f      	cmp	r3, #15
 80054da:	d80d      	bhi.n	80054f8 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	33e0      	adds	r3, #224	; 0xe0
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	78fb      	ldrb	r3, [r7, #3]
 80054ea:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	33e0      	adds	r3, #224	; 0xe0
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff57 	bl	80053c8 <USBH_LL_IncTimer>
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b082      	sub	sp, #8
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff ff8f 	bl	8005454 <USBH_LL_Connect>
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff ff98 	bl	8005482 <USBH_LL_Disconnect>
}
 8005552:	bf00      	nop
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
 8005566:	4613      	mov	r3, r2
 8005568:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ff49 	bl	800541c <USBH_LL_PortEnabled>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff49 	bl	8005438 <USBH_LL_PortDisabled>
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7fd faf9 	bl	8002bbc <HAL_HCD_Stop>
 80055ca:	4603      	mov	r3, r0
 80055cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f807 	bl	80055e4 <USBH_Get_USB_Status>
 80055d6:	4603      	mov	r3, r0
 80055d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80055da:	7bbb      	ldrb	r3, [r7, #14]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	2b03      	cmp	r3, #3
 80055f6:	d817      	bhi.n	8005628 <USBH_Get_USB_Status+0x44>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <USBH_Get_USB_Status+0x1c>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005611 	.word	0x08005611
 8005604:	08005617 	.word	0x08005617
 8005608:	0800561d 	.word	0x0800561d
 800560c:	08005623 	.word	0x08005623
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	73fb      	strb	r3, [r7, #15]
    break;
 8005614:	e00b      	b.n	800562e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005616:	2302      	movs	r3, #2
 8005618:	73fb      	strb	r3, [r7, #15]
    break;
 800561a:	e008      	b.n	800562e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
    break;
 8005620:	e005      	b.n	800562e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005622:	2302      	movs	r3, #2
 8005624:	73fb      	strb	r3, [r7, #15]
    break;
 8005626:	e002      	b.n	800562e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005628:	2302      	movs	r3, #2
 800562a:	73fb      	strb	r3, [r7, #15]
    break;
 800562c:	bf00      	nop
  }
  return usb_status;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <__errno>:
 800563c:	4b01      	ldr	r3, [pc, #4]	; (8005644 <__errno+0x8>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000080 	.word	0x20000080

08005648 <__libc_init_array>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4d0d      	ldr	r5, [pc, #52]	; (8005680 <__libc_init_array+0x38>)
 800564c:	4c0d      	ldr	r4, [pc, #52]	; (8005684 <__libc_init_array+0x3c>)
 800564e:	1b64      	subs	r4, r4, r5
 8005650:	10a4      	asrs	r4, r4, #2
 8005652:	2600      	movs	r6, #0
 8005654:	42a6      	cmp	r6, r4
 8005656:	d109      	bne.n	800566c <__libc_init_array+0x24>
 8005658:	4d0b      	ldr	r5, [pc, #44]	; (8005688 <__libc_init_array+0x40>)
 800565a:	4c0c      	ldr	r4, [pc, #48]	; (800568c <__libc_init_array+0x44>)
 800565c:	f000 fd64 	bl	8006128 <_init>
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	2600      	movs	r6, #0
 8005666:	42a6      	cmp	r6, r4
 8005668:	d105      	bne.n	8005676 <__libc_init_array+0x2e>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005670:	4798      	blx	r3
 8005672:	3601      	adds	r6, #1
 8005674:	e7ee      	b.n	8005654 <__libc_init_array+0xc>
 8005676:	f855 3b04 	ldr.w	r3, [r5], #4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
 800567e:	e7f2      	b.n	8005666 <__libc_init_array+0x1e>
 8005680:	080061d8 	.word	0x080061d8
 8005684:	080061d8 	.word	0x080061d8
 8005688:	080061d8 	.word	0x080061d8
 800568c:	080061dc 	.word	0x080061dc

08005690 <_free_r>:
 8005690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005692:	2900      	cmp	r1, #0
 8005694:	d044      	beq.n	8005720 <_free_r+0x90>
 8005696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569a:	9001      	str	r0, [sp, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	f1a1 0404 	sub.w	r4, r1, #4
 80056a2:	bfb8      	it	lt
 80056a4:	18e4      	addlt	r4, r4, r3
 80056a6:	f000 f903 	bl	80058b0 <__malloc_lock>
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <_free_r+0x94>)
 80056ac:	9801      	ldr	r0, [sp, #4]
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	b933      	cbnz	r3, 80056c0 <_free_r+0x30>
 80056b2:	6063      	str	r3, [r4, #4]
 80056b4:	6014      	str	r4, [r2, #0]
 80056b6:	b003      	add	sp, #12
 80056b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056bc:	f000 b8fe 	b.w	80058bc <__malloc_unlock>
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d908      	bls.n	80056d6 <_free_r+0x46>
 80056c4:	6825      	ldr	r5, [r4, #0]
 80056c6:	1961      	adds	r1, r4, r5
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1949      	addeq	r1, r1, r5
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	e7ed      	b.n	80056b2 <_free_r+0x22>
 80056d6:	461a      	mov	r2, r3
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	b10b      	cbz	r3, 80056e0 <_free_r+0x50>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d9fa      	bls.n	80056d6 <_free_r+0x46>
 80056e0:	6811      	ldr	r1, [r2, #0]
 80056e2:	1855      	adds	r5, r2, r1
 80056e4:	42a5      	cmp	r5, r4
 80056e6:	d10b      	bne.n	8005700 <_free_r+0x70>
 80056e8:	6824      	ldr	r4, [r4, #0]
 80056ea:	4421      	add	r1, r4
 80056ec:	1854      	adds	r4, r2, r1
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	6011      	str	r1, [r2, #0]
 80056f2:	d1e0      	bne.n	80056b6 <_free_r+0x26>
 80056f4:	681c      	ldr	r4, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	6053      	str	r3, [r2, #4]
 80056fa:	4421      	add	r1, r4
 80056fc:	6011      	str	r1, [r2, #0]
 80056fe:	e7da      	b.n	80056b6 <_free_r+0x26>
 8005700:	d902      	bls.n	8005708 <_free_r+0x78>
 8005702:	230c      	movs	r3, #12
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	e7d6      	b.n	80056b6 <_free_r+0x26>
 8005708:	6825      	ldr	r5, [r4, #0]
 800570a:	1961      	adds	r1, r4, r5
 800570c:	428b      	cmp	r3, r1
 800570e:	bf04      	itt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	6063      	str	r3, [r4, #4]
 8005716:	bf04      	itt	eq
 8005718:	1949      	addeq	r1, r1, r5
 800571a:	6021      	streq	r1, [r4, #0]
 800571c:	6054      	str	r4, [r2, #4]
 800571e:	e7ca      	b.n	80056b6 <_free_r+0x26>
 8005720:	b003      	add	sp, #12
 8005722:	bd30      	pop	{r4, r5, pc}
 8005724:	200004a4 	.word	0x200004a4

08005728 <sbrk_aligned>:
 8005728:	b570      	push	{r4, r5, r6, lr}
 800572a:	4e0e      	ldr	r6, [pc, #56]	; (8005764 <sbrk_aligned+0x3c>)
 800572c:	460c      	mov	r4, r1
 800572e:	6831      	ldr	r1, [r6, #0]
 8005730:	4605      	mov	r5, r0
 8005732:	b911      	cbnz	r1, 800573a <sbrk_aligned+0x12>
 8005734:	f000 f88c 	bl	8005850 <_sbrk_r>
 8005738:	6030      	str	r0, [r6, #0]
 800573a:	4621      	mov	r1, r4
 800573c:	4628      	mov	r0, r5
 800573e:	f000 f887 	bl	8005850 <_sbrk_r>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d00a      	beq.n	800575c <sbrk_aligned+0x34>
 8005746:	1cc4      	adds	r4, r0, #3
 8005748:	f024 0403 	bic.w	r4, r4, #3
 800574c:	42a0      	cmp	r0, r4
 800574e:	d007      	beq.n	8005760 <sbrk_aligned+0x38>
 8005750:	1a21      	subs	r1, r4, r0
 8005752:	4628      	mov	r0, r5
 8005754:	f000 f87c 	bl	8005850 <_sbrk_r>
 8005758:	3001      	adds	r0, #1
 800575a:	d101      	bne.n	8005760 <sbrk_aligned+0x38>
 800575c:	f04f 34ff 	mov.w	r4, #4294967295
 8005760:	4620      	mov	r0, r4
 8005762:	bd70      	pop	{r4, r5, r6, pc}
 8005764:	200004a8 	.word	0x200004a8

08005768 <_malloc_r>:
 8005768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800576c:	1ccd      	adds	r5, r1, #3
 800576e:	f025 0503 	bic.w	r5, r5, #3
 8005772:	3508      	adds	r5, #8
 8005774:	2d0c      	cmp	r5, #12
 8005776:	bf38      	it	cc
 8005778:	250c      	movcc	r5, #12
 800577a:	2d00      	cmp	r5, #0
 800577c:	4607      	mov	r7, r0
 800577e:	db01      	blt.n	8005784 <_malloc_r+0x1c>
 8005780:	42a9      	cmp	r1, r5
 8005782:	d905      	bls.n	8005790 <_malloc_r+0x28>
 8005784:	230c      	movs	r3, #12
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	2600      	movs	r6, #0
 800578a:	4630      	mov	r0, r6
 800578c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005790:	4e2e      	ldr	r6, [pc, #184]	; (800584c <_malloc_r+0xe4>)
 8005792:	f000 f88d 	bl	80058b0 <__malloc_lock>
 8005796:	6833      	ldr	r3, [r6, #0]
 8005798:	461c      	mov	r4, r3
 800579a:	bb34      	cbnz	r4, 80057ea <_malloc_r+0x82>
 800579c:	4629      	mov	r1, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff ffc2 	bl	8005728 <sbrk_aligned>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	4604      	mov	r4, r0
 80057a8:	d14d      	bne.n	8005846 <_malloc_r+0xde>
 80057aa:	6834      	ldr	r4, [r6, #0]
 80057ac:	4626      	mov	r6, r4
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	d140      	bne.n	8005834 <_malloc_r+0xcc>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	4631      	mov	r1, r6
 80057b6:	4638      	mov	r0, r7
 80057b8:	eb04 0803 	add.w	r8, r4, r3
 80057bc:	f000 f848 	bl	8005850 <_sbrk_r>
 80057c0:	4580      	cmp	r8, r0
 80057c2:	d13a      	bne.n	800583a <_malloc_r+0xd2>
 80057c4:	6821      	ldr	r1, [r4, #0]
 80057c6:	3503      	adds	r5, #3
 80057c8:	1a6d      	subs	r5, r5, r1
 80057ca:	f025 0503 	bic.w	r5, r5, #3
 80057ce:	3508      	adds	r5, #8
 80057d0:	2d0c      	cmp	r5, #12
 80057d2:	bf38      	it	cc
 80057d4:	250c      	movcc	r5, #12
 80057d6:	4629      	mov	r1, r5
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ffa5 	bl	8005728 <sbrk_aligned>
 80057de:	3001      	adds	r0, #1
 80057e0:	d02b      	beq.n	800583a <_malloc_r+0xd2>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	442b      	add	r3, r5
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	e00e      	b.n	8005808 <_malloc_r+0xa0>
 80057ea:	6822      	ldr	r2, [r4, #0]
 80057ec:	1b52      	subs	r2, r2, r5
 80057ee:	d41e      	bmi.n	800582e <_malloc_r+0xc6>
 80057f0:	2a0b      	cmp	r2, #11
 80057f2:	d916      	bls.n	8005822 <_malloc_r+0xba>
 80057f4:	1961      	adds	r1, r4, r5
 80057f6:	42a3      	cmp	r3, r4
 80057f8:	6025      	str	r5, [r4, #0]
 80057fa:	bf18      	it	ne
 80057fc:	6059      	strne	r1, [r3, #4]
 80057fe:	6863      	ldr	r3, [r4, #4]
 8005800:	bf08      	it	eq
 8005802:	6031      	streq	r1, [r6, #0]
 8005804:	5162      	str	r2, [r4, r5]
 8005806:	604b      	str	r3, [r1, #4]
 8005808:	4638      	mov	r0, r7
 800580a:	f104 060b 	add.w	r6, r4, #11
 800580e:	f000 f855 	bl	80058bc <__malloc_unlock>
 8005812:	f026 0607 	bic.w	r6, r6, #7
 8005816:	1d23      	adds	r3, r4, #4
 8005818:	1af2      	subs	r2, r6, r3
 800581a:	d0b6      	beq.n	800578a <_malloc_r+0x22>
 800581c:	1b9b      	subs	r3, r3, r6
 800581e:	50a3      	str	r3, [r4, r2]
 8005820:	e7b3      	b.n	800578a <_malloc_r+0x22>
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	42a3      	cmp	r3, r4
 8005826:	bf0c      	ite	eq
 8005828:	6032      	streq	r2, [r6, #0]
 800582a:	605a      	strne	r2, [r3, #4]
 800582c:	e7ec      	b.n	8005808 <_malloc_r+0xa0>
 800582e:	4623      	mov	r3, r4
 8005830:	6864      	ldr	r4, [r4, #4]
 8005832:	e7b2      	b.n	800579a <_malloc_r+0x32>
 8005834:	4634      	mov	r4, r6
 8005836:	6876      	ldr	r6, [r6, #4]
 8005838:	e7b9      	b.n	80057ae <_malloc_r+0x46>
 800583a:	230c      	movs	r3, #12
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4638      	mov	r0, r7
 8005840:	f000 f83c 	bl	80058bc <__malloc_unlock>
 8005844:	e7a1      	b.n	800578a <_malloc_r+0x22>
 8005846:	6025      	str	r5, [r4, #0]
 8005848:	e7de      	b.n	8005808 <_malloc_r+0xa0>
 800584a:	bf00      	nop
 800584c:	200004a4 	.word	0x200004a4

08005850 <_sbrk_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d06      	ldr	r5, [pc, #24]	; (800586c <_sbrk_r+0x1c>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f7fc fc08 	bl	8002070 <_sbrk>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_sbrk_r+0x1a>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_sbrk_r+0x1a>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	200004ac 	.word	0x200004ac

08005870 <siprintf>:
 8005870:	b40e      	push	{r1, r2, r3}
 8005872:	b500      	push	{lr}
 8005874:	b09c      	sub	sp, #112	; 0x70
 8005876:	ab1d      	add	r3, sp, #116	; 0x74
 8005878:	9002      	str	r0, [sp, #8]
 800587a:	9006      	str	r0, [sp, #24]
 800587c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005880:	4809      	ldr	r0, [pc, #36]	; (80058a8 <siprintf+0x38>)
 8005882:	9107      	str	r1, [sp, #28]
 8005884:	9104      	str	r1, [sp, #16]
 8005886:	4909      	ldr	r1, [pc, #36]	; (80058ac <siprintf+0x3c>)
 8005888:	f853 2b04 	ldr.w	r2, [r3], #4
 800588c:	9105      	str	r1, [sp, #20]
 800588e:	6800      	ldr	r0, [r0, #0]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	a902      	add	r1, sp, #8
 8005894:	f000 f874 	bl	8005980 <_svfiprintf_r>
 8005898:	9b02      	ldr	r3, [sp, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	b01c      	add	sp, #112	; 0x70
 80058a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058a4:	b003      	add	sp, #12
 80058a6:	4770      	bx	lr
 80058a8:	20000080 	.word	0x20000080
 80058ac:	ffff0208 	.word	0xffff0208

080058b0 <__malloc_lock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__malloc_lock+0x8>)
 80058b2:	f000 baf9 	b.w	8005ea8 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	200004b0 	.word	0x200004b0

080058bc <__malloc_unlock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__malloc_unlock+0x8>)
 80058be:	f000 baf4 	b.w	8005eaa <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	200004b0 	.word	0x200004b0

080058c8 <__ssputs_r>:
 80058c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058cc:	688e      	ldr	r6, [r1, #8]
 80058ce:	429e      	cmp	r6, r3
 80058d0:	4682      	mov	sl, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	4690      	mov	r8, r2
 80058d6:	461f      	mov	r7, r3
 80058d8:	d838      	bhi.n	800594c <__ssputs_r+0x84>
 80058da:	898a      	ldrh	r2, [r1, #12]
 80058dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058e0:	d032      	beq.n	8005948 <__ssputs_r+0x80>
 80058e2:	6825      	ldr	r5, [r4, #0]
 80058e4:	6909      	ldr	r1, [r1, #16]
 80058e6:	eba5 0901 	sub.w	r9, r5, r1
 80058ea:	6965      	ldr	r5, [r4, #20]
 80058ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f4:	3301      	adds	r3, #1
 80058f6:	444b      	add	r3, r9
 80058f8:	106d      	asrs	r5, r5, #1
 80058fa:	429d      	cmp	r5, r3
 80058fc:	bf38      	it	cc
 80058fe:	461d      	movcc	r5, r3
 8005900:	0553      	lsls	r3, r2, #21
 8005902:	d531      	bpl.n	8005968 <__ssputs_r+0xa0>
 8005904:	4629      	mov	r1, r5
 8005906:	f7ff ff2f 	bl	8005768 <_malloc_r>
 800590a:	4606      	mov	r6, r0
 800590c:	b950      	cbnz	r0, 8005924 <__ssputs_r+0x5c>
 800590e:	230c      	movs	r3, #12
 8005910:	f8ca 3000 	str.w	r3, [sl]
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005924:	6921      	ldr	r1, [r4, #16]
 8005926:	464a      	mov	r2, r9
 8005928:	f000 fac0 	bl	8005eac <memcpy>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	6126      	str	r6, [r4, #16]
 800593a:	6165      	str	r5, [r4, #20]
 800593c:	444e      	add	r6, r9
 800593e:	eba5 0509 	sub.w	r5, r5, r9
 8005942:	6026      	str	r6, [r4, #0]
 8005944:	60a5      	str	r5, [r4, #8]
 8005946:	463e      	mov	r6, r7
 8005948:	42be      	cmp	r6, r7
 800594a:	d900      	bls.n	800594e <__ssputs_r+0x86>
 800594c:	463e      	mov	r6, r7
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	4632      	mov	r2, r6
 8005952:	4641      	mov	r1, r8
 8005954:	f000 fab8 	bl	8005ec8 <memmove>
 8005958:	68a3      	ldr	r3, [r4, #8]
 800595a:	1b9b      	subs	r3, r3, r6
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	4433      	add	r3, r6
 8005962:	6023      	str	r3, [r4, #0]
 8005964:	2000      	movs	r0, #0
 8005966:	e7db      	b.n	8005920 <__ssputs_r+0x58>
 8005968:	462a      	mov	r2, r5
 800596a:	f000 fac7 	bl	8005efc <_realloc_r>
 800596e:	4606      	mov	r6, r0
 8005970:	2800      	cmp	r0, #0
 8005972:	d1e1      	bne.n	8005938 <__ssputs_r+0x70>
 8005974:	6921      	ldr	r1, [r4, #16]
 8005976:	4650      	mov	r0, sl
 8005978:	f7ff fe8a 	bl	8005690 <_free_r>
 800597c:	e7c7      	b.n	800590e <__ssputs_r+0x46>
	...

08005980 <_svfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4698      	mov	r8, r3
 8005986:	898b      	ldrh	r3, [r1, #12]
 8005988:	061b      	lsls	r3, r3, #24
 800598a:	b09d      	sub	sp, #116	; 0x74
 800598c:	4607      	mov	r7, r0
 800598e:	460d      	mov	r5, r1
 8005990:	4614      	mov	r4, r2
 8005992:	d50e      	bpl.n	80059b2 <_svfiprintf_r+0x32>
 8005994:	690b      	ldr	r3, [r1, #16]
 8005996:	b963      	cbnz	r3, 80059b2 <_svfiprintf_r+0x32>
 8005998:	2140      	movs	r1, #64	; 0x40
 800599a:	f7ff fee5 	bl	8005768 <_malloc_r>
 800599e:	6028      	str	r0, [r5, #0]
 80059a0:	6128      	str	r0, [r5, #16]
 80059a2:	b920      	cbnz	r0, 80059ae <_svfiprintf_r+0x2e>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	f04f 30ff 	mov.w	r0, #4294967295
 80059ac:	e0d1      	b.n	8005b52 <_svfiprintf_r+0x1d2>
 80059ae:	2340      	movs	r3, #64	; 0x40
 80059b0:	616b      	str	r3, [r5, #20]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9309      	str	r3, [sp, #36]	; 0x24
 80059b6:	2320      	movs	r3, #32
 80059b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80059c0:	2330      	movs	r3, #48	; 0x30
 80059c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b6c <_svfiprintf_r+0x1ec>
 80059c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ca:	f04f 0901 	mov.w	r9, #1
 80059ce:	4623      	mov	r3, r4
 80059d0:	469a      	mov	sl, r3
 80059d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d6:	b10a      	cbz	r2, 80059dc <_svfiprintf_r+0x5c>
 80059d8:	2a25      	cmp	r2, #37	; 0x25
 80059da:	d1f9      	bne.n	80059d0 <_svfiprintf_r+0x50>
 80059dc:	ebba 0b04 	subs.w	fp, sl, r4
 80059e0:	d00b      	beq.n	80059fa <_svfiprintf_r+0x7a>
 80059e2:	465b      	mov	r3, fp
 80059e4:	4622      	mov	r2, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	4638      	mov	r0, r7
 80059ea:	f7ff ff6d 	bl	80058c8 <__ssputs_r>
 80059ee:	3001      	adds	r0, #1
 80059f0:	f000 80aa 	beq.w	8005b48 <_svfiprintf_r+0x1c8>
 80059f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f6:	445a      	add	r2, fp
 80059f8:	9209      	str	r2, [sp, #36]	; 0x24
 80059fa:	f89a 3000 	ldrb.w	r3, [sl]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80a2 	beq.w	8005b48 <_svfiprintf_r+0x1c8>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0e:	f10a 0a01 	add.w	sl, sl, #1
 8005a12:	9304      	str	r3, [sp, #16]
 8005a14:	9307      	str	r3, [sp, #28]
 8005a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1c:	4654      	mov	r4, sl
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a24:	4851      	ldr	r0, [pc, #324]	; (8005b6c <_svfiprintf_r+0x1ec>)
 8005a26:	f7fa fbe3 	bl	80001f0 <memchr>
 8005a2a:	9a04      	ldr	r2, [sp, #16]
 8005a2c:	b9d8      	cbnz	r0, 8005a66 <_svfiprintf_r+0xe6>
 8005a2e:	06d0      	lsls	r0, r2, #27
 8005a30:	bf44      	itt	mi
 8005a32:	2320      	movmi	r3, #32
 8005a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a38:	0711      	lsls	r1, r2, #28
 8005a3a:	bf44      	itt	mi
 8005a3c:	232b      	movmi	r3, #43	; 0x2b
 8005a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a42:	f89a 3000 	ldrb.w	r3, [sl]
 8005a46:	2b2a      	cmp	r3, #42	; 0x2a
 8005a48:	d015      	beq.n	8005a76 <_svfiprintf_r+0xf6>
 8005a4a:	9a07      	ldr	r2, [sp, #28]
 8005a4c:	4654      	mov	r4, sl
 8005a4e:	2000      	movs	r0, #0
 8005a50:	f04f 0c0a 	mov.w	ip, #10
 8005a54:	4621      	mov	r1, r4
 8005a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5a:	3b30      	subs	r3, #48	; 0x30
 8005a5c:	2b09      	cmp	r3, #9
 8005a5e:	d94e      	bls.n	8005afe <_svfiprintf_r+0x17e>
 8005a60:	b1b0      	cbz	r0, 8005a90 <_svfiprintf_r+0x110>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e014      	b.n	8005a90 <_svfiprintf_r+0x110>
 8005a66:	eba0 0308 	sub.w	r3, r0, r8
 8005a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	46a2      	mov	sl, r4
 8005a74:	e7d2      	b.n	8005a1c <_svfiprintf_r+0x9c>
 8005a76:	9b03      	ldr	r3, [sp, #12]
 8005a78:	1d19      	adds	r1, r3, #4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	9103      	str	r1, [sp, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfbb      	ittet	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	f042 0202 	orrlt.w	r2, r2, #2
 8005a88:	9307      	strge	r3, [sp, #28]
 8005a8a:	9307      	strlt	r3, [sp, #28]
 8005a8c:	bfb8      	it	lt
 8005a8e:	9204      	strlt	r2, [sp, #16]
 8005a90:	7823      	ldrb	r3, [r4, #0]
 8005a92:	2b2e      	cmp	r3, #46	; 0x2e
 8005a94:	d10c      	bne.n	8005ab0 <_svfiprintf_r+0x130>
 8005a96:	7863      	ldrb	r3, [r4, #1]
 8005a98:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9a:	d135      	bne.n	8005b08 <_svfiprintf_r+0x188>
 8005a9c:	9b03      	ldr	r3, [sp, #12]
 8005a9e:	1d1a      	adds	r2, r3, #4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	9203      	str	r2, [sp, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005aac:	3402      	adds	r4, #2
 8005aae:	9305      	str	r3, [sp, #20]
 8005ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b7c <_svfiprintf_r+0x1fc>
 8005ab4:	7821      	ldrb	r1, [r4, #0]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	4650      	mov	r0, sl
 8005aba:	f7fa fb99 	bl	80001f0 <memchr>
 8005abe:	b140      	cbz	r0, 8005ad2 <_svfiprintf_r+0x152>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	eba0 000a 	sub.w	r0, r0, sl
 8005ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	4303      	orrs	r3, r0
 8005ace:	3401      	adds	r4, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad6:	4826      	ldr	r0, [pc, #152]	; (8005b70 <_svfiprintf_r+0x1f0>)
 8005ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005adc:	2206      	movs	r2, #6
 8005ade:	f7fa fb87 	bl	80001f0 <memchr>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d038      	beq.n	8005b58 <_svfiprintf_r+0x1d8>
 8005ae6:	4b23      	ldr	r3, [pc, #140]	; (8005b74 <_svfiprintf_r+0x1f4>)
 8005ae8:	bb1b      	cbnz	r3, 8005b32 <_svfiprintf_r+0x1b2>
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	3307      	adds	r3, #7
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	3308      	adds	r3, #8
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af8:	4433      	add	r3, r6
 8005afa:	9309      	str	r3, [sp, #36]	; 0x24
 8005afc:	e767      	b.n	80059ce <_svfiprintf_r+0x4e>
 8005afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b02:	460c      	mov	r4, r1
 8005b04:	2001      	movs	r0, #1
 8005b06:	e7a5      	b.n	8005a54 <_svfiprintf_r+0xd4>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	3401      	adds	r4, #1
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	f04f 0c0a 	mov.w	ip, #10
 8005b14:	4620      	mov	r0, r4
 8005b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b1a:	3a30      	subs	r2, #48	; 0x30
 8005b1c:	2a09      	cmp	r2, #9
 8005b1e:	d903      	bls.n	8005b28 <_svfiprintf_r+0x1a8>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0c5      	beq.n	8005ab0 <_svfiprintf_r+0x130>
 8005b24:	9105      	str	r1, [sp, #20]
 8005b26:	e7c3      	b.n	8005ab0 <_svfiprintf_r+0x130>
 8005b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e7f0      	b.n	8005b14 <_svfiprintf_r+0x194>
 8005b32:	ab03      	add	r3, sp, #12
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	462a      	mov	r2, r5
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <_svfiprintf_r+0x1f8>)
 8005b3a:	a904      	add	r1, sp, #16
 8005b3c:	4638      	mov	r0, r7
 8005b3e:	f3af 8000 	nop.w
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	4606      	mov	r6, r0
 8005b46:	d1d6      	bne.n	8005af6 <_svfiprintf_r+0x176>
 8005b48:	89ab      	ldrh	r3, [r5, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af2c 	bmi.w	80059a8 <_svfiprintf_r+0x28>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	b01d      	add	sp, #116	; 0x74
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	462a      	mov	r2, r5
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <_svfiprintf_r+0x1f8>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4638      	mov	r0, r7
 8005b64:	f000 f87a 	bl	8005c5c <_printf_i>
 8005b68:	e7eb      	b.n	8005b42 <_svfiprintf_r+0x1c2>
 8005b6a:	bf00      	nop
 8005b6c:	080061a4 	.word	0x080061a4
 8005b70:	080061ae 	.word	0x080061ae
 8005b74:	00000000 	.word	0x00000000
 8005b78:	080058c9 	.word	0x080058c9
 8005b7c:	080061aa 	.word	0x080061aa

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4616      	mov	r6, r2
 8005b86:	4699      	mov	r9, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfb8      	it	lt
 8005b94:	4613      	movlt	r3, r2
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b10a      	cbz	r2, 8005ba6 <_printf_common+0x26>
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	6033      	str	r3, [r6, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	0699      	lsls	r1, r3, #26
 8005baa:	bf42      	ittt	mi
 8005bac:	6833      	ldrmi	r3, [r6, #0]
 8005bae:	3302      	addmi	r3, #2
 8005bb0:	6033      	strmi	r3, [r6, #0]
 8005bb2:	6825      	ldr	r5, [r4, #0]
 8005bb4:	f015 0506 	ands.w	r5, r5, #6
 8005bb8:	d106      	bne.n	8005bc8 <_printf_common+0x48>
 8005bba:	f104 0a19 	add.w	sl, r4, #25
 8005bbe:	68e3      	ldr	r3, [r4, #12]
 8005bc0:	6832      	ldr	r2, [r6, #0]
 8005bc2:	1a9b      	subs	r3, r3, r2
 8005bc4:	42ab      	cmp	r3, r5
 8005bc6:	dc26      	bgt.n	8005c16 <_printf_common+0x96>
 8005bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bcc:	1e13      	subs	r3, r2, #0
 8005bce:	6822      	ldr	r2, [r4, #0]
 8005bd0:	bf18      	it	ne
 8005bd2:	2301      	movne	r3, #1
 8005bd4:	0692      	lsls	r2, r2, #26
 8005bd6:	d42b      	bmi.n	8005c30 <_printf_common+0xb0>
 8005bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bdc:	4649      	mov	r1, r9
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	3001      	adds	r0, #1
 8005be4:	d01e      	beq.n	8005c24 <_printf_common+0xa4>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	68e5      	ldr	r5, [r4, #12]
 8005bea:	6832      	ldr	r2, [r6, #0]
 8005bec:	f003 0306 	and.w	r3, r3, #6
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	bf08      	it	eq
 8005bf4:	1aad      	subeq	r5, r5, r2
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	6922      	ldr	r2, [r4, #16]
 8005bfa:	bf0c      	ite	eq
 8005bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c00:	2500      	movne	r5, #0
 8005c02:	4293      	cmp	r3, r2
 8005c04:	bfc4      	itt	gt
 8005c06:	1a9b      	subgt	r3, r3, r2
 8005c08:	18ed      	addgt	r5, r5, r3
 8005c0a:	2600      	movs	r6, #0
 8005c0c:	341a      	adds	r4, #26
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d11a      	bne.n	8005c48 <_printf_common+0xc8>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e008      	b.n	8005c28 <_printf_common+0xa8>
 8005c16:	2301      	movs	r3, #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4638      	mov	r0, r7
 8005c1e:	47c0      	blx	r8
 8005c20:	3001      	adds	r0, #1
 8005c22:	d103      	bne.n	8005c2c <_printf_common+0xac>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	e7c6      	b.n	8005bbe <_printf_common+0x3e>
 8005c30:	18e1      	adds	r1, r4, r3
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	2030      	movs	r0, #48	; 0x30
 8005c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c3a:	4422      	add	r2, r4
 8005c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c44:	3302      	adds	r3, #2
 8005c46:	e7c7      	b.n	8005bd8 <_printf_common+0x58>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	4638      	mov	r0, r7
 8005c50:	47c0      	blx	r8
 8005c52:	3001      	adds	r0, #1
 8005c54:	d0e6      	beq.n	8005c24 <_printf_common+0xa4>
 8005c56:	3601      	adds	r6, #1
 8005c58:	e7d9      	b.n	8005c0e <_printf_common+0x8e>
	...

08005c5c <_printf_i>:
 8005c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c60:	7e0f      	ldrb	r7, [r1, #24]
 8005c62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4691      	mov	r9, r2
 8005c68:	4680      	mov	r8, r0
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	469a      	mov	sl, r3
 8005c6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c72:	d807      	bhi.n	8005c84 <_printf_i+0x28>
 8005c74:	2f62      	cmp	r7, #98	; 0x62
 8005c76:	d80a      	bhi.n	8005c8e <_printf_i+0x32>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f000 80d8 	beq.w	8005e2e <_printf_i+0x1d2>
 8005c7e:	2f58      	cmp	r7, #88	; 0x58
 8005c80:	f000 80a3 	beq.w	8005dca <_printf_i+0x16e>
 8005c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c8c:	e03a      	b.n	8005d04 <_printf_i+0xa8>
 8005c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c92:	2b15      	cmp	r3, #21
 8005c94:	d8f6      	bhi.n	8005c84 <_printf_i+0x28>
 8005c96:	a101      	add	r1, pc, #4	; (adr r1, 8005c9c <_printf_i+0x40>)
 8005c98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c9c:	08005cf5 	.word	0x08005cf5
 8005ca0:	08005d09 	.word	0x08005d09
 8005ca4:	08005c85 	.word	0x08005c85
 8005ca8:	08005c85 	.word	0x08005c85
 8005cac:	08005c85 	.word	0x08005c85
 8005cb0:	08005c85 	.word	0x08005c85
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005c85 	.word	0x08005c85
 8005cbc:	08005c85 	.word	0x08005c85
 8005cc0:	08005c85 	.word	0x08005c85
 8005cc4:	08005c85 	.word	0x08005c85
 8005cc8:	08005e15 	.word	0x08005e15
 8005ccc:	08005d39 	.word	0x08005d39
 8005cd0:	08005df7 	.word	0x08005df7
 8005cd4:	08005c85 	.word	0x08005c85
 8005cd8:	08005c85 	.word	0x08005c85
 8005cdc:	08005e37 	.word	0x08005e37
 8005ce0:	08005c85 	.word	0x08005c85
 8005ce4:	08005d39 	.word	0x08005d39
 8005ce8:	08005c85 	.word	0x08005c85
 8005cec:	08005c85 	.word	0x08005c85
 8005cf0:	08005dff 	.word	0x08005dff
 8005cf4:	682b      	ldr	r3, [r5, #0]
 8005cf6:	1d1a      	adds	r2, r3, #4
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	602a      	str	r2, [r5, #0]
 8005cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0a3      	b.n	8005e50 <_printf_i+0x1f4>
 8005d08:	6820      	ldr	r0, [r4, #0]
 8005d0a:	6829      	ldr	r1, [r5, #0]
 8005d0c:	0606      	lsls	r6, r0, #24
 8005d0e:	f101 0304 	add.w	r3, r1, #4
 8005d12:	d50a      	bpl.n	8005d2a <_printf_i+0xce>
 8005d14:	680e      	ldr	r6, [r1, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	da03      	bge.n	8005d24 <_printf_i+0xc8>
 8005d1c:	232d      	movs	r3, #45	; 0x2d
 8005d1e:	4276      	negs	r6, r6
 8005d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d24:	485e      	ldr	r0, [pc, #376]	; (8005ea0 <_printf_i+0x244>)
 8005d26:	230a      	movs	r3, #10
 8005d28:	e019      	b.n	8005d5e <_printf_i+0x102>
 8005d2a:	680e      	ldr	r6, [r1, #0]
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d32:	bf18      	it	ne
 8005d34:	b236      	sxthne	r6, r6
 8005d36:	e7ef      	b.n	8005d18 <_printf_i+0xbc>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	6820      	ldr	r0, [r4, #0]
 8005d3c:	1d19      	adds	r1, r3, #4
 8005d3e:	6029      	str	r1, [r5, #0]
 8005d40:	0601      	lsls	r1, r0, #24
 8005d42:	d501      	bpl.n	8005d48 <_printf_i+0xec>
 8005d44:	681e      	ldr	r6, [r3, #0]
 8005d46:	e002      	b.n	8005d4e <_printf_i+0xf2>
 8005d48:	0646      	lsls	r6, r0, #25
 8005d4a:	d5fb      	bpl.n	8005d44 <_printf_i+0xe8>
 8005d4c:	881e      	ldrh	r6, [r3, #0]
 8005d4e:	4854      	ldr	r0, [pc, #336]	; (8005ea0 <_printf_i+0x244>)
 8005d50:	2f6f      	cmp	r7, #111	; 0x6f
 8005d52:	bf0c      	ite	eq
 8005d54:	2308      	moveq	r3, #8
 8005d56:	230a      	movne	r3, #10
 8005d58:	2100      	movs	r1, #0
 8005d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5e:	6865      	ldr	r5, [r4, #4]
 8005d60:	60a5      	str	r5, [r4, #8]
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	bfa2      	ittt	ge
 8005d66:	6821      	ldrge	r1, [r4, #0]
 8005d68:	f021 0104 	bicge.w	r1, r1, #4
 8005d6c:	6021      	strge	r1, [r4, #0]
 8005d6e:	b90e      	cbnz	r6, 8005d74 <_printf_i+0x118>
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	d04d      	beq.n	8005e10 <_printf_i+0x1b4>
 8005d74:	4615      	mov	r5, r2
 8005d76:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d7a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d7e:	5dc7      	ldrb	r7, [r0, r7]
 8005d80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d84:	4637      	mov	r7, r6
 8005d86:	42bb      	cmp	r3, r7
 8005d88:	460e      	mov	r6, r1
 8005d8a:	d9f4      	bls.n	8005d76 <_printf_i+0x11a>
 8005d8c:	2b08      	cmp	r3, #8
 8005d8e:	d10b      	bne.n	8005da8 <_printf_i+0x14c>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	07de      	lsls	r6, r3, #31
 8005d94:	d508      	bpl.n	8005da8 <_printf_i+0x14c>
 8005d96:	6923      	ldr	r3, [r4, #16]
 8005d98:	6861      	ldr	r1, [r4, #4]
 8005d9a:	4299      	cmp	r1, r3
 8005d9c:	bfde      	ittt	le
 8005d9e:	2330      	movle	r3, #48	; 0x30
 8005da0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005da8:	1b52      	subs	r2, r2, r5
 8005daa:	6122      	str	r2, [r4, #16]
 8005dac:	f8cd a000 	str.w	sl, [sp]
 8005db0:	464b      	mov	r3, r9
 8005db2:	aa03      	add	r2, sp, #12
 8005db4:	4621      	mov	r1, r4
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7ff fee2 	bl	8005b80 <_printf_common>
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	d14c      	bne.n	8005e5a <_printf_i+0x1fe>
 8005dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc4:	b004      	add	sp, #16
 8005dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dca:	4835      	ldr	r0, [pc, #212]	; (8005ea0 <_printf_i+0x244>)
 8005dcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005dd0:	6829      	ldr	r1, [r5, #0]
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005dd8:	6029      	str	r1, [r5, #0]
 8005dda:	061d      	lsls	r5, r3, #24
 8005ddc:	d514      	bpl.n	8005e08 <_printf_i+0x1ac>
 8005dde:	07df      	lsls	r7, r3, #31
 8005de0:	bf44      	itt	mi
 8005de2:	f043 0320 	orrmi.w	r3, r3, #32
 8005de6:	6023      	strmi	r3, [r4, #0]
 8005de8:	b91e      	cbnz	r6, 8005df2 <_printf_i+0x196>
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f023 0320 	bic.w	r3, r3, #32
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	2310      	movs	r3, #16
 8005df4:	e7b0      	b.n	8005d58 <_printf_i+0xfc>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	f043 0320 	orr.w	r3, r3, #32
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	2378      	movs	r3, #120	; 0x78
 8005e00:	4828      	ldr	r0, [pc, #160]	; (8005ea4 <_printf_i+0x248>)
 8005e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e06:	e7e3      	b.n	8005dd0 <_printf_i+0x174>
 8005e08:	0659      	lsls	r1, r3, #25
 8005e0a:	bf48      	it	mi
 8005e0c:	b2b6      	uxthmi	r6, r6
 8005e0e:	e7e6      	b.n	8005dde <_printf_i+0x182>
 8005e10:	4615      	mov	r5, r2
 8005e12:	e7bb      	b.n	8005d8c <_printf_i+0x130>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	6826      	ldr	r6, [r4, #0]
 8005e18:	6961      	ldr	r1, [r4, #20]
 8005e1a:	1d18      	adds	r0, r3, #4
 8005e1c:	6028      	str	r0, [r5, #0]
 8005e1e:	0635      	lsls	r5, r6, #24
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	d501      	bpl.n	8005e28 <_printf_i+0x1cc>
 8005e24:	6019      	str	r1, [r3, #0]
 8005e26:	e002      	b.n	8005e2e <_printf_i+0x1d2>
 8005e28:	0670      	lsls	r0, r6, #25
 8005e2a:	d5fb      	bpl.n	8005e24 <_printf_i+0x1c8>
 8005e2c:	8019      	strh	r1, [r3, #0]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6123      	str	r3, [r4, #16]
 8005e32:	4615      	mov	r5, r2
 8005e34:	e7ba      	b.n	8005dac <_printf_i+0x150>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	602a      	str	r2, [r5, #0]
 8005e3c:	681d      	ldr	r5, [r3, #0]
 8005e3e:	6862      	ldr	r2, [r4, #4]
 8005e40:	2100      	movs	r1, #0
 8005e42:	4628      	mov	r0, r5
 8005e44:	f7fa f9d4 	bl	80001f0 <memchr>
 8005e48:	b108      	cbz	r0, 8005e4e <_printf_i+0x1f2>
 8005e4a:	1b40      	subs	r0, r0, r5
 8005e4c:	6060      	str	r0, [r4, #4]
 8005e4e:	6863      	ldr	r3, [r4, #4]
 8005e50:	6123      	str	r3, [r4, #16]
 8005e52:	2300      	movs	r3, #0
 8005e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e58:	e7a8      	b.n	8005dac <_printf_i+0x150>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4640      	mov	r0, r8
 8005e62:	47d0      	blx	sl
 8005e64:	3001      	adds	r0, #1
 8005e66:	d0ab      	beq.n	8005dc0 <_printf_i+0x164>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	079b      	lsls	r3, r3, #30
 8005e6c:	d413      	bmi.n	8005e96 <_printf_i+0x23a>
 8005e6e:	68e0      	ldr	r0, [r4, #12]
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	4298      	cmp	r0, r3
 8005e74:	bfb8      	it	lt
 8005e76:	4618      	movlt	r0, r3
 8005e78:	e7a4      	b.n	8005dc4 <_printf_i+0x168>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	4649      	mov	r1, r9
 8005e80:	4640      	mov	r0, r8
 8005e82:	47d0      	blx	sl
 8005e84:	3001      	adds	r0, #1
 8005e86:	d09b      	beq.n	8005dc0 <_printf_i+0x164>
 8005e88:	3501      	adds	r5, #1
 8005e8a:	68e3      	ldr	r3, [r4, #12]
 8005e8c:	9903      	ldr	r1, [sp, #12]
 8005e8e:	1a5b      	subs	r3, r3, r1
 8005e90:	42ab      	cmp	r3, r5
 8005e92:	dcf2      	bgt.n	8005e7a <_printf_i+0x21e>
 8005e94:	e7eb      	b.n	8005e6e <_printf_i+0x212>
 8005e96:	2500      	movs	r5, #0
 8005e98:	f104 0619 	add.w	r6, r4, #25
 8005e9c:	e7f5      	b.n	8005e8a <_printf_i+0x22e>
 8005e9e:	bf00      	nop
 8005ea0:	080061b5 	.word	0x080061b5
 8005ea4:	080061c6 	.word	0x080061c6

08005ea8 <__retarget_lock_acquire_recursive>:
 8005ea8:	4770      	bx	lr

08005eaa <__retarget_lock_release_recursive>:
 8005eaa:	4770      	bx	lr

08005eac <memcpy>:
 8005eac:	440a      	add	r2, r1
 8005eae:	4291      	cmp	r1, r2
 8005eb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb4:	d100      	bne.n	8005eb8 <memcpy+0xc>
 8005eb6:	4770      	bx	lr
 8005eb8:	b510      	push	{r4, lr}
 8005eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec2:	4291      	cmp	r1, r2
 8005ec4:	d1f9      	bne.n	8005eba <memcpy+0xe>
 8005ec6:	bd10      	pop	{r4, pc}

08005ec8 <memmove>:
 8005ec8:	4288      	cmp	r0, r1
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	eb01 0402 	add.w	r4, r1, r2
 8005ed0:	d902      	bls.n	8005ed8 <memmove+0x10>
 8005ed2:	4284      	cmp	r4, r0
 8005ed4:	4623      	mov	r3, r4
 8005ed6:	d807      	bhi.n	8005ee8 <memmove+0x20>
 8005ed8:	1e43      	subs	r3, r0, #1
 8005eda:	42a1      	cmp	r1, r4
 8005edc:	d008      	beq.n	8005ef0 <memmove+0x28>
 8005ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ee6:	e7f8      	b.n	8005eda <memmove+0x12>
 8005ee8:	4402      	add	r2, r0
 8005eea:	4601      	mov	r1, r0
 8005eec:	428a      	cmp	r2, r1
 8005eee:	d100      	bne.n	8005ef2 <memmove+0x2a>
 8005ef0:	bd10      	pop	{r4, pc}
 8005ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005efa:	e7f7      	b.n	8005eec <memmove+0x24>

08005efc <_realloc_r>:
 8005efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f00:	4680      	mov	r8, r0
 8005f02:	4614      	mov	r4, r2
 8005f04:	460e      	mov	r6, r1
 8005f06:	b921      	cbnz	r1, 8005f12 <_realloc_r+0x16>
 8005f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f7ff bc2b 	b.w	8005768 <_malloc_r>
 8005f12:	b92a      	cbnz	r2, 8005f20 <_realloc_r+0x24>
 8005f14:	f7ff fbbc 	bl	8005690 <_free_r>
 8005f18:	4625      	mov	r5, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f20:	f000 f81b 	bl	8005f5a <_malloc_usable_size_r>
 8005f24:	4284      	cmp	r4, r0
 8005f26:	4607      	mov	r7, r0
 8005f28:	d802      	bhi.n	8005f30 <_realloc_r+0x34>
 8005f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f2e:	d812      	bhi.n	8005f56 <_realloc_r+0x5a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fc18 	bl	8005768 <_malloc_r>
 8005f38:	4605      	mov	r5, r0
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d0ed      	beq.n	8005f1a <_realloc_r+0x1e>
 8005f3e:	42bc      	cmp	r4, r7
 8005f40:	4622      	mov	r2, r4
 8005f42:	4631      	mov	r1, r6
 8005f44:	bf28      	it	cs
 8005f46:	463a      	movcs	r2, r7
 8005f48:	f7ff ffb0 	bl	8005eac <memcpy>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff fb9e 	bl	8005690 <_free_r>
 8005f54:	e7e1      	b.n	8005f1a <_realloc_r+0x1e>
 8005f56:	4635      	mov	r5, r6
 8005f58:	e7df      	b.n	8005f1a <_realloc_r+0x1e>

08005f5a <_malloc_usable_size_r>:
 8005f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f5e:	1f18      	subs	r0, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfbc      	itt	lt
 8005f64:	580b      	ldrlt	r3, [r1, r0]
 8005f66:	18c0      	addlt	r0, r0, r3
 8005f68:	4770      	bx	lr

08005f6a <sqrt>:
 8005f6a:	b538      	push	{r3, r4, r5, lr}
 8005f6c:	ed2d 8b02 	vpush	{d8}
 8005f70:	ec55 4b10 	vmov	r4, r5, d0
 8005f74:	f000 f826 	bl	8005fc4 <__ieee754_sqrt>
 8005f78:	4622      	mov	r2, r4
 8005f7a:	462b      	mov	r3, r5
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	eeb0 8a40 	vmov.f32	s16, s0
 8005f84:	eef0 8a60 	vmov.f32	s17, s1
 8005f88:	f7fa fdd8 	bl	8000b3c <__aeabi_dcmpun>
 8005f8c:	b990      	cbnz	r0, 8005fb4 <sqrt+0x4a>
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	4620      	mov	r0, r4
 8005f94:	4629      	mov	r1, r5
 8005f96:	f7fa fda9 	bl	8000aec <__aeabi_dcmplt>
 8005f9a:	b158      	cbz	r0, 8005fb4 <sqrt+0x4a>
 8005f9c:	f7ff fb4e 	bl	800563c <__errno>
 8005fa0:	2321      	movs	r3, #33	; 0x21
 8005fa2:	6003      	str	r3, [r0, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fc56 	bl	800085c <__aeabi_ddiv>
 8005fb0:	ec41 0b18 	vmov	d8, r0, r1
 8005fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8005fb8:	eef0 0a68 	vmov.f32	s1, s17
 8005fbc:	ecbd 8b02 	vpop	{d8}
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

08005fc4 <__ieee754_sqrt>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	ec55 4b10 	vmov	r4, r5, d0
 8005fcc:	4e55      	ldr	r6, [pc, #340]	; (8006124 <__ieee754_sqrt+0x160>)
 8005fce:	43ae      	bics	r6, r5
 8005fd0:	ee10 0a10 	vmov	r0, s0
 8005fd4:	ee10 3a10 	vmov	r3, s0
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4629      	mov	r1, r5
 8005fdc:	d110      	bne.n	8006000 <__ieee754_sqrt+0x3c>
 8005fde:	ee10 2a10 	vmov	r2, s0
 8005fe2:	462b      	mov	r3, r5
 8005fe4:	f7fa fb10 	bl	8000608 <__aeabi_dmul>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa f954 	bl	800029c <__adddf3>
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	460d      	mov	r5, r1
 8005ff8:	ec45 4b10 	vmov	d0, r4, r5
 8005ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006000:	2d00      	cmp	r5, #0
 8006002:	dc10      	bgt.n	8006026 <__ieee754_sqrt+0x62>
 8006004:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006008:	4330      	orrs	r0, r6
 800600a:	d0f5      	beq.n	8005ff8 <__ieee754_sqrt+0x34>
 800600c:	b15d      	cbz	r5, 8006026 <__ieee754_sqrt+0x62>
 800600e:	ee10 2a10 	vmov	r2, s0
 8006012:	462b      	mov	r3, r5
 8006014:	ee10 0a10 	vmov	r0, s0
 8006018:	f7fa f93e 	bl	8000298 <__aeabi_dsub>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	f7fa fc1c 	bl	800085c <__aeabi_ddiv>
 8006024:	e7e6      	b.n	8005ff4 <__ieee754_sqrt+0x30>
 8006026:	1512      	asrs	r2, r2, #20
 8006028:	d074      	beq.n	8006114 <__ieee754_sqrt+0x150>
 800602a:	07d4      	lsls	r4, r2, #31
 800602c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006030:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006034:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006038:	bf5e      	ittt	pl
 800603a:	0fda      	lsrpl	r2, r3, #31
 800603c:	005b      	lslpl	r3, r3, #1
 800603e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006042:	2400      	movs	r4, #0
 8006044:	0fda      	lsrs	r2, r3, #31
 8006046:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800604a:	107f      	asrs	r7, r7, #1
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2516      	movs	r5, #22
 8006050:	4620      	mov	r0, r4
 8006052:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006056:	1886      	adds	r6, r0, r2
 8006058:	428e      	cmp	r6, r1
 800605a:	bfde      	ittt	le
 800605c:	1b89      	suble	r1, r1, r6
 800605e:	18b0      	addle	r0, r6, r2
 8006060:	18a4      	addle	r4, r4, r2
 8006062:	0049      	lsls	r1, r1, #1
 8006064:	3d01      	subs	r5, #1
 8006066:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800606a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800606e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006072:	d1f0      	bne.n	8006056 <__ieee754_sqrt+0x92>
 8006074:	462a      	mov	r2, r5
 8006076:	f04f 0e20 	mov.w	lr, #32
 800607a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800607e:	4281      	cmp	r1, r0
 8006080:	eb06 0c05 	add.w	ip, r6, r5
 8006084:	dc02      	bgt.n	800608c <__ieee754_sqrt+0xc8>
 8006086:	d113      	bne.n	80060b0 <__ieee754_sqrt+0xec>
 8006088:	459c      	cmp	ip, r3
 800608a:	d811      	bhi.n	80060b0 <__ieee754_sqrt+0xec>
 800608c:	f1bc 0f00 	cmp.w	ip, #0
 8006090:	eb0c 0506 	add.w	r5, ip, r6
 8006094:	da43      	bge.n	800611e <__ieee754_sqrt+0x15a>
 8006096:	2d00      	cmp	r5, #0
 8006098:	db41      	blt.n	800611e <__ieee754_sqrt+0x15a>
 800609a:	f100 0801 	add.w	r8, r0, #1
 800609e:	1a09      	subs	r1, r1, r0
 80060a0:	459c      	cmp	ip, r3
 80060a2:	bf88      	it	hi
 80060a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80060a8:	eba3 030c 	sub.w	r3, r3, ip
 80060ac:	4432      	add	r2, r6
 80060ae:	4640      	mov	r0, r8
 80060b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80060b4:	f1be 0e01 	subs.w	lr, lr, #1
 80060b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80060bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80060c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80060c4:	d1db      	bne.n	800607e <__ieee754_sqrt+0xba>
 80060c6:	430b      	orrs	r3, r1
 80060c8:	d006      	beq.n	80060d8 <__ieee754_sqrt+0x114>
 80060ca:	1c50      	adds	r0, r2, #1
 80060cc:	bf13      	iteet	ne
 80060ce:	3201      	addne	r2, #1
 80060d0:	3401      	addeq	r4, #1
 80060d2:	4672      	moveq	r2, lr
 80060d4:	f022 0201 	bicne.w	r2, r2, #1
 80060d8:	1063      	asrs	r3, r4, #1
 80060da:	0852      	lsrs	r2, r2, #1
 80060dc:	07e1      	lsls	r1, r4, #31
 80060de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80060e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80060e6:	bf48      	it	mi
 80060e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80060ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80060f0:	4614      	mov	r4, r2
 80060f2:	e781      	b.n	8005ff8 <__ieee754_sqrt+0x34>
 80060f4:	0ad9      	lsrs	r1, r3, #11
 80060f6:	3815      	subs	r0, #21
 80060f8:	055b      	lsls	r3, r3, #21
 80060fa:	2900      	cmp	r1, #0
 80060fc:	d0fa      	beq.n	80060f4 <__ieee754_sqrt+0x130>
 80060fe:	02cd      	lsls	r5, r1, #11
 8006100:	d50a      	bpl.n	8006118 <__ieee754_sqrt+0x154>
 8006102:	f1c2 0420 	rsb	r4, r2, #32
 8006106:	fa23 f404 	lsr.w	r4, r3, r4
 800610a:	1e55      	subs	r5, r2, #1
 800610c:	4093      	lsls	r3, r2
 800610e:	4321      	orrs	r1, r4
 8006110:	1b42      	subs	r2, r0, r5
 8006112:	e78a      	b.n	800602a <__ieee754_sqrt+0x66>
 8006114:	4610      	mov	r0, r2
 8006116:	e7f0      	b.n	80060fa <__ieee754_sqrt+0x136>
 8006118:	0049      	lsls	r1, r1, #1
 800611a:	3201      	adds	r2, #1
 800611c:	e7ef      	b.n	80060fe <__ieee754_sqrt+0x13a>
 800611e:	4680      	mov	r8, r0
 8006120:	e7bd      	b.n	800609e <__ieee754_sqrt+0xda>
 8006122:	bf00      	nop
 8006124:	7ff00000 	.word	0x7ff00000

08006128 <_init>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr

08006134 <_fini>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	bf00      	nop
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr
